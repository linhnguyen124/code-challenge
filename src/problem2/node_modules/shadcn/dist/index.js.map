{"version":3,"sources":["../src/commands/add.ts","../src/commands/init.ts","../src/preflights/preflight-init.ts","../src/utils/errors.ts","../src/utils/get-project-info.ts","../src/utils/frameworks.ts","../src/utils/get-config.ts","../src/utils/highlighter.ts","../src/utils/resolve-import.ts","../src/utils/get-package-info.ts","../src/utils/logger.ts","../src/utils/spinner.ts","../src/registry/api.ts","../src/utils/handle-error.ts","../src/utils/updaters/update-tailwind-config.ts","../src/utils/add-components.ts","../src/utils/updaters/update-css-vars.ts","../src/utils/get-package-manager.ts","../src/utils/updaters/update-dependencies.ts","../src/utils/updaters/update-files.ts","../src/utils/transformers/index.ts","../src/utils/transformers/transform-css-vars.ts","../src/utils/icon-libraries.ts","../src/utils/transformers/transform-icons.ts","../src/utils/transformers/transform-import.ts","../src/utils/transformers/transform-jsx.ts","../src/utils/transformers/transform-rsc.ts","../src/utils/transformers/transform-tw-prefix.ts","../src/utils/create-project.ts","../src/utils/updaters/update-tailwind-content.ts","../src/preflights/preflight-add.ts","../src/utils/update-app-index.ts","../src/commands/build.ts","../src/preflights/preflight-build.ts","../src/commands/diff.ts","../src/commands/info.ts","../src/commands/migrate.ts","../src/migrations/migrate-icons.ts","../src/preflights/preflight-migrate.ts","../src/index.ts","../package.json"],"names":["path","fs","MISSING_DIR_OR_EMPTY_PROJECT","MISSING_CONFIG","TAILWIND_NOT_CONFIGURED","IMPORT_ALIAS_MISSING","UNSUPPORTED_FRAMEWORK","BUILD_MISSING_REGISTRY_FILE","FRAMEWORKS","cyan","green","red","yellow","highlighter","createMatchPath","resolveImport","importPath","config","cosmiconfig","fg","loadConfig","z","DEFAULT_COMPONENTS","DEFAULT_UTILS","DEFAULT_TAILWIND_CSS","DEFAULT_TAILWIND_CONFIG","explorer","rawConfigSchema","configSchema","workspaceConfigSchema","getConfig","cwd","getRawConfig","resolveConfigPaths","tsConfig","configResult","componentPath","getWorkspaceConfig","resolvedAliases","key","isAliasKey","resolvedPath","packageRoot","findPackageRoot","result","commonRoot","findCommonRoot","relativePath","matchingPackageRoot","pkgPath","pkgDir","parts1","parts2","commonParts","i","getPackageInfo","shouldThrow","packageJsonPath","PROJECT_SHARED_IGNORE","TS_CONFIG_SCHEMA","getProjectInfo","configFiles","isSrcDir","isTsx","tailwindConfigFile","tailwindCssFile","aliasPrefix","packageJson","isTypeScriptProject","getTailwindConfigFile","getTailwindCssFile","getTsConfigAliasPrefix","isUsingAppDir","type","file","dep","files","alias","paths","getProjectConfig","defaultProjectInfo","existingConfig","projectInfo","logger","args","ora","spinner","text","options","preFlightInit","errors","projectSpinner","frameworkSpinner","tailwindSpinner","tsConfigSpinner","handleError","error","value","tmpdir","deepmerge","objectToString","Project","QuoteKind","ScriptKind","SyntaxKind","updateTailwindConfig","tailwindConfig","tailwindFileRelativePath","raw","output","transformTailwindConfig","input","sourceFile","_createSourceFile","configObject","node","property","quoteChar","_getQuoteChar","addTailwindConfigProperty","plugin","addTailwindConfigPlugin","addTailwindConfigTheme","existingProperty","newProperty","initializer","newValue","initializerText","element","theme","nestSpreadProperties","themeInitializer","themeObjectString","themeObject","parseObjectLiteral","dst","src","resultString","unnestSpreadProperties","existingPlugins","dir","tempFile","obj","properties","prop","spreadAssignment","spreadText","nestSpreadElements","arr","elements","j","propAssignment","unnsetSpreadElements","spreadTest","objectLiteralString","statement","parseObjectLiteralExpression","name","parseArrayLiteralExpression","parseValue","buildTailwindThemeColorsFromCssVars","cssVars","parts","colorName","subType","HttpsProxyAgent","fetch","REGISTRY_URL","agent","getRegistryIndex","fetchRegistry","registryIndexSchema","getRegistryStyles","stylesSchema","getRegistryIcons","iconsSchema","getRegistryItem","style","isUrl","registryItemSchema","getRegistryBaseColors","getRegistryBaseColor","baseColor","registryBaseColorSchema","resolveTree","index","names","tree","entry","dependencies","component","self","c","fetchTree","item","getItemTargetPath","override","parent","url","getRegistryUrl","response","errorMessages","message","registryResolveItemsTree","registryItems","resolveRegistryItems","payload","registryGetTheme","tailwind","docs","registryResolvedItemsTreeSchema","resolveRegistryDependencies","visited","resolveDependencies","itemUrl","dependency","registryDependencies","itemRegistryDependencies","getRegistryTypeAliasMap","getRegistryParentMap","map","postcss","AtRule","updateCssVars","cssFilepath","cssFilepathRelative","cssVarsSpinner","transformCssVars","plugins","updateCssVarsPlugin","cleanupDefaultNextStylesPlugin","updateBaseLayerPlugin","root","requiredRules","baseLayer","selector","apply","rule","applyRule","vars","addOrUpdateVars","removeConflictVars","rootRule","propsToRemove","bodyRule","darkRootRule","ruleNode","newDecl","existingDecl","detect","getPackageManager","targetDir","withFallback","packageManager","userAgent","execa","prompts","updateDependencies","dependenciesSpinner","flag","isUsingReact19","confirmation","packageInfo","existsSync","basename","valueWithColorMapping","applyColorMapping","splitClassName","className","rest","alpha","split","variant","PREFIXES","mapping","classNames","lightMode","darkMode","modifier","prefix","needle","ICON_LIBRARIES","SOURCE_LIBRARY","transformIcons","registryIcons","sourceLibrary","targetLibrary","targetedIcons","importDeclaration","specifier","iconName","targetedIcon","iconImportDeclaration","icon","_useSemicolon","COMMON_CN_IMPORTS","transformImport","isRemote","importDeclarations","moduleSpecifier","updateImportAliases","transformFromAstSync","parse","transformTypescript","recast","PARSE_OPTIONS","transformJsx","ast","code","directiveRegex","transformRsc","first","transformTwPrefixes","defaultClassNames","applyPrefix","callExpression","arg","prefixed","project","createTempSourceFile","filename","transform","opts","transformers","transformer","updateFiles","filesCreatedSpinner","filesCreated","filesUpdated","filesSkipped","filePath","resolveFilePath","f","fileName","match","existingFile","overwrite","content","resolveFileTargetDirectory","resolveNestedFilePath","normalizedPaths","p","normalizedNeedle","needleDir","needleSegments","testPath","normalizedFilePath","normalizedTargetDir","fileSegments","targetSegments","lastTargetSegment","commonDirIndex","segment","addComponents","components","workspaceConfig","addWorkspaceComponents","addProjectComponents","registrySpinner","registryParentMap","registryTypeAliasMap","rootSpinner","registryParent","targetConfig","workspaceRoot","os","MONOREPO_TEMPLATE_URL","createProject","projectType","projectName","nextVersion","isRemoteComponent","meta","projectPath","createNextProject","createMonorepoProject","createSpinner","templatePath","tarPath","extractedPath","updateTailwindContent","transformTailwindContent","addTailwindConfigContent","contentItem","Command","initOptionsSchema","init","runInit","newProjectType","preflight","projectConfig","promptForMinimalConfig","promptForConfig","proceed","componentSpinner","targetPath","fullConfig","defaultConfig","styles","baseColors","color","cssVariables","s","preFlightAdd","updateAppIndex","indexPath","registryItem","addOptionsSchema","add","isTheme","confirm","promptForRegistryComponents","shouldUpdateAppIndex","registryIndex","preFlightBuild","resolvePaths","buildOptionsSchema","build","registry","registrySchema","buildSpinner","diffLines","updateOptionsSchema","diff","projectComponents","componentsWithUpdates","changes","diffComponent","change","printDiff","fileContent","registryContent","patch","part","info","randomBytes","migrateIcons","uiPath","libraryChoices","iconLibrary","migrateOptions","migrationSpinner","migrateIconsFile","iconsMapping","sourceLibraryImport","targetLibraryImport","preFlightMigrate","migrations","migrateOptionsSchema","migration","migrate","package_default","main","program"],"mappings":"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","sourcesContent":["import path from \"path\"\nimport { runInit } from \"@/src/commands/init\"\nimport { preFlightAdd } from \"@/src/preflights/preflight-add\"\nimport { getRegistryIndex } from \"@/src/registry/api\"\nimport { addComponents } from \"@/src/utils/add-components\"\nimport { createProject } from \"@/src/utils/create-project\"\nimport * as ERRORS from \"@/src/utils/errors\"\nimport { getConfig } from \"@/src/utils/get-config\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { updateAppIndex } from \"@/src/utils/update-app-index\"\nimport { Command } from \"commander\"\nimport prompts from \"prompts\"\nimport { z } from \"zod\"\n\nexport const addOptionsSchema = z.object({\n  components: z.array(z.string()).optional(),\n  yes: z.boolean(),\n  overwrite: z.boolean(),\n  cwd: z.string(),\n  all: z.boolean(),\n  path: z.string().optional(),\n  silent: z.boolean(),\n  srcDir: z.boolean().optional(),\n})\n\nexport const add = new Command()\n  .name(\"add\")\n  .description(\"add a component to your project\")\n  .argument(\n    \"[components...]\",\n    \"the components to add or a url to the component.\"\n  )\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", false)\n  .option(\"-o, --overwrite\", \"overwrite existing files.\", false)\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .option(\"-a, --all\", \"add all available components\", false)\n  .option(\"-p, --path <path>\", \"the path to add the component to.\")\n  .option(\"-s, --silent\", \"mute output.\", false)\n  .option(\n    \"--src-dir\",\n    \"use the src directory when creating a new project.\",\n    false\n  )\n  .action(async (components, opts) => {\n    try {\n      const options = addOptionsSchema.parse({\n        components,\n        cwd: path.resolve(opts.cwd),\n        ...opts,\n      })\n\n      // Confirm if user is installing themes.\n      // For now, we assume a theme is prefixed with \"theme-\".\n      const isTheme = options.components?.some((component) =>\n        component.includes(\"theme-\")\n      )\n      if (!options.yes && isTheme) {\n        logger.break()\n        const { confirm } = await prompts({\n          type: \"confirm\",\n          name: \"confirm\",\n          message: highlighter.warn(\n            \"You are about to install a new theme. \\nExisting CSS variables will be overwritten. Continue?\"\n          ),\n        })\n        if (!confirm) {\n          logger.break()\n          logger.log(\"Theme installation cancelled.\")\n          logger.break()\n          process.exit(1)\n        }\n      }\n\n      if (!options.components?.length) {\n        options.components = await promptForRegistryComponents(options)\n      }\n\n      let { errors, config } = await preFlightAdd(options)\n\n      // No components.json file. Prompt the user to run init.\n      if (errors[ERRORS.MISSING_CONFIG]) {\n        const { proceed } = await prompts({\n          type: \"confirm\",\n          name: \"proceed\",\n          message: `You need to create a ${highlighter.info(\n            \"components.json\"\n          )} file to add components. Proceed?`,\n          initial: true,\n        })\n\n        if (!proceed) {\n          logger.break()\n          process.exit(1)\n        }\n\n        config = await runInit({\n          cwd: options.cwd,\n          yes: true,\n          force: true,\n          defaults: false,\n          skipPreflight: false,\n          silent: true,\n          isNewProject: false,\n          srcDir: options.srcDir,\n        })\n      }\n\n      let shouldUpdateAppIndex = false\n      if (errors[ERRORS.MISSING_DIR_OR_EMPTY_PROJECT]) {\n        const { projectPath, projectType } = await createProject({\n          cwd: options.cwd,\n          force: options.overwrite,\n          srcDir: options.srcDir,\n          components: options.components,\n        })\n        if (!projectPath) {\n          logger.break()\n          process.exit(1)\n        }\n        options.cwd = projectPath\n\n        if (projectType === \"monorepo\") {\n          options.cwd = path.resolve(options.cwd, \"apps/web\")\n          config = await getConfig(options.cwd)\n        } else {\n          config = await runInit({\n            cwd: options.cwd,\n            yes: true,\n            force: true,\n            defaults: false,\n            skipPreflight: true,\n            silent: true,\n            isNewProject: true,\n            srcDir: options.srcDir,\n          })\n\n          shouldUpdateAppIndex =\n            options.components?.length === 1 &&\n            !!options.components[0].match(/\\/chat\\/b\\//)\n        }\n      }\n\n      if (!config) {\n        throw new Error(\n          `Failed to read config at ${highlighter.info(options.cwd)}.`\n        )\n      }\n\n      await addComponents(options.components, config, options)\n\n      // If we're adding a single component and it's from the v0 registry,\n      // let's update the app/page.tsx file to import the component.\n      if (shouldUpdateAppIndex) {\n        await updateAppIndex(options.components[0], config)\n      }\n    } catch (error) {\n      logger.break()\n      handleError(error)\n    }\n  })\n\nasync function promptForRegistryComponents(\n  options: z.infer<typeof addOptionsSchema>\n) {\n  const registryIndex = await getRegistryIndex()\n  if (!registryIndex) {\n    logger.break()\n    handleError(new Error(\"Failed to fetch registry index.\"))\n    return []\n  }\n\n  if (options.all) {\n    return registryIndex.map((entry) => entry.name)\n  }\n\n  if (options.components?.length) {\n    return options.components\n  }\n\n  const { components } = await prompts({\n    type: \"multiselect\",\n    name: \"components\",\n    message: \"Which components would you like to add?\",\n    hint: \"Space to select. A to toggle all. Enter to submit.\",\n    instructions: false,\n    choices: registryIndex\n      .filter((entry) => entry.type === \"registry:ui\")\n      .map((entry) => ({\n        title: entry.name,\n        value: entry.name,\n        selected: options.all ? true : options.components?.includes(entry.name),\n      })),\n  })\n\n  if (!components?.length) {\n    logger.warn(\"No components selected. Exiting.\")\n    logger.info(\"\")\n    process.exit(1)\n  }\n\n  const result = z.array(z.string()).safeParse(components)\n  if (!result.success) {\n    logger.error(\"\")\n    handleError(new Error(\"Something went wrong. Please try again.\"))\n    return []\n  }\n  return result.data\n}\n","import { promises as fs } from \"fs\"\nimport path from \"path\"\nimport { preFlightInit } from \"@/src/preflights/preflight-init\"\nimport { getRegistryBaseColors, getRegistryStyles } from \"@/src/registry/api\"\nimport { addComponents } from \"@/src/utils/add-components\"\nimport { createProject } from \"@/src/utils/create-project\"\nimport * as ERRORS from \"@/src/utils/errors\"\nimport {\n  DEFAULT_COMPONENTS,\n  DEFAULT_TAILWIND_CONFIG,\n  DEFAULT_TAILWIND_CSS,\n  DEFAULT_UTILS,\n  getConfig,\n  rawConfigSchema,\n  resolveConfigPaths,\n  type Config,\n} from \"@/src/utils/get-config\"\nimport { getProjectConfig, getProjectInfo } from \"@/src/utils/get-project-info\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport { updateTailwindContent } from \"@/src/utils/updaters/update-tailwind-content\"\nimport { Command } from \"commander\"\nimport prompts from \"prompts\"\nimport { z } from \"zod\"\n\nexport const initOptionsSchema = z.object({\n  cwd: z.string(),\n  components: z.array(z.string()).optional(),\n  yes: z.boolean(),\n  defaults: z.boolean(),\n  force: z.boolean(),\n  silent: z.boolean(),\n  isNewProject: z.boolean(),\n  srcDir: z.boolean().optional(),\n})\n\nexport const init = new Command()\n  .name(\"init\")\n  .description(\"initialize your project and install dependencies\")\n  .argument(\n    \"[components...]\",\n    \"the components to add or a url to the component.\"\n  )\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", true)\n  .option(\"-d, --defaults,\", \"use default configuration.\", false)\n  .option(\"-f, --force\", \"force overwrite of existing configuration.\", false)\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .option(\"-s, --silent\", \"mute output.\", false)\n  .option(\n    \"--src-dir\",\n    \"use the src directory when creating a new project.\",\n    false\n  )\n  .action(async (components, opts) => {\n    try {\n      const options = initOptionsSchema.parse({\n        cwd: path.resolve(opts.cwd),\n        isNewProject: false,\n        components,\n        ...opts,\n      })\n\n      await runInit(options)\n\n      logger.log(\n        `${highlighter.success(\n          \"Success!\"\n        )} Project initialization completed.\\nYou may now add components.`\n      )\n      logger.break()\n    } catch (error) {\n      logger.break()\n      handleError(error)\n    }\n  })\n\nexport async function runInit(\n  options: z.infer<typeof initOptionsSchema> & {\n    skipPreflight?: boolean\n  }\n) {\n  let projectInfo\n  let newProjectType\n  if (!options.skipPreflight) {\n    const preflight = await preFlightInit(options)\n    if (preflight.errors[ERRORS.MISSING_DIR_OR_EMPTY_PROJECT]) {\n      const { projectPath, projectType } = await createProject(options)\n      if (!projectPath) {\n        process.exit(1)\n      }\n      options.cwd = projectPath\n      options.isNewProject = true\n      newProjectType = projectType\n    }\n    projectInfo = preflight.projectInfo\n  } else {\n    projectInfo = await getProjectInfo(options.cwd)\n  }\n\n  if (newProjectType === \"monorepo\") {\n    options.cwd = path.resolve(options.cwd, \"apps/web\")\n    return await getConfig(options.cwd)\n  }\n\n  const projectConfig = await getProjectConfig(options.cwd, projectInfo)\n  const config = projectConfig\n    ? await promptForMinimalConfig(projectConfig, options)\n    : await promptForConfig(await getConfig(options.cwd))\n\n  if (!options.yes) {\n    const { proceed } = await prompts({\n      type: \"confirm\",\n      name: \"proceed\",\n      message: `Write configuration to ${highlighter.info(\n        \"components.json\"\n      )}. Proceed?`,\n      initial: true,\n    })\n\n    if (!proceed) {\n      process.exit(0)\n    }\n  }\n\n  // Write components.json.\n  const componentSpinner = spinner(`Writing components.json.`).start()\n  const targetPath = path.resolve(options.cwd, \"components.json\")\n  await fs.writeFile(targetPath, JSON.stringify(config, null, 2), \"utf8\")\n  componentSpinner.succeed()\n\n  // Add components.\n  const fullConfig = await resolveConfigPaths(options.cwd, config)\n  const components = [\"index\", ...(options.components || [])]\n  await addComponents(components, fullConfig, {\n    // Init will always overwrite files.\n    overwrite: true,\n    silent: options.silent,\n    isNewProject:\n      options.isNewProject || projectInfo?.framework.name === \"next-app\",\n  })\n\n  // If a new project is using src dir, let's update the tailwind content config.\n  // TODO: Handle this per framework.\n  if (options.isNewProject && options.srcDir) {\n    await updateTailwindContent(\n      [\"./src/**/*.{js,ts,jsx,tsx,mdx}\"],\n      fullConfig,\n      {\n        silent: options.silent,\n      }\n    )\n  }\n\n  return fullConfig\n}\n\nasync function promptForConfig(defaultConfig: Config | null = null) {\n  const [styles, baseColors] = await Promise.all([\n    getRegistryStyles(),\n    getRegistryBaseColors(),\n  ])\n\n  logger.info(\"\")\n  const options = await prompts([\n    {\n      type: \"toggle\",\n      name: \"typescript\",\n      message: `Would you like to use ${highlighter.info(\n        \"TypeScript\"\n      )} (recommended)?`,\n      initial: defaultConfig?.tsx ?? true,\n      active: \"yes\",\n      inactive: \"no\",\n    },\n    {\n      type: \"select\",\n      name: \"style\",\n      message: `Which ${highlighter.info(\"style\")} would you like to use?`,\n      choices: styles.map((style) => ({\n        title: style.label,\n        value: style.name,\n      })),\n    },\n    {\n      type: \"select\",\n      name: \"tailwindBaseColor\",\n      message: `Which color would you like to use as the ${highlighter.info(\n        \"base color\"\n      )}?`,\n      choices: baseColors.map((color) => ({\n        title: color.label,\n        value: color.name,\n      })),\n    },\n    {\n      type: \"text\",\n      name: \"tailwindCss\",\n      message: `Where is your ${highlighter.info(\"global CSS\")} file?`,\n      initial: defaultConfig?.tailwind.css ?? DEFAULT_TAILWIND_CSS,\n    },\n    {\n      type: \"toggle\",\n      name: \"tailwindCssVariables\",\n      message: `Would you like to use ${highlighter.info(\n        \"CSS variables\"\n      )} for theming?`,\n      initial: defaultConfig?.tailwind.cssVariables ?? true,\n      active: \"yes\",\n      inactive: \"no\",\n    },\n    {\n      type: \"text\",\n      name: \"tailwindPrefix\",\n      message: `Are you using a custom ${highlighter.info(\n        \"tailwind prefix eg. tw-\"\n      )}? (Leave blank if not)`,\n      initial: \"\",\n    },\n    {\n      type: \"text\",\n      name: \"tailwindConfig\",\n      message: `Where is your ${highlighter.info(\n        \"tailwind.config.js\"\n      )} located?`,\n      initial: defaultConfig?.tailwind.config ?? DEFAULT_TAILWIND_CONFIG,\n    },\n    {\n      type: \"text\",\n      name: \"components\",\n      message: `Configure the import alias for ${highlighter.info(\n        \"components\"\n      )}:`,\n      initial: defaultConfig?.aliases[\"components\"] ?? DEFAULT_COMPONENTS,\n    },\n    {\n      type: \"text\",\n      name: \"utils\",\n      message: `Configure the import alias for ${highlighter.info(\"utils\")}:`,\n      initial: defaultConfig?.aliases[\"utils\"] ?? DEFAULT_UTILS,\n    },\n    {\n      type: \"toggle\",\n      name: \"rsc\",\n      message: `Are you using ${highlighter.info(\"React Server Components\")}?`,\n      initial: defaultConfig?.rsc ?? true,\n      active: \"yes\",\n      inactive: \"no\",\n    },\n  ])\n\n  return rawConfigSchema.parse({\n    $schema: \"https://ui.shadcn.com/schema.json\",\n    style: options.style,\n    tailwind: {\n      config: options.tailwindConfig,\n      css: options.tailwindCss,\n      baseColor: options.tailwindBaseColor,\n      cssVariables: options.tailwindCssVariables,\n      prefix: options.tailwindPrefix,\n    },\n    rsc: options.rsc,\n    tsx: options.typescript,\n    aliases: {\n      utils: options.utils,\n      components: options.components,\n      // TODO: fix this.\n      lib: options.components.replace(/\\/components$/, \"lib\"),\n      hooks: options.components.replace(/\\/components$/, \"hooks\"),\n    },\n  })\n}\n\nasync function promptForMinimalConfig(\n  defaultConfig: Config,\n  opts: z.infer<typeof initOptionsSchema>\n) {\n  let style = defaultConfig.style\n  let baseColor = defaultConfig.tailwind.baseColor\n  let cssVariables = defaultConfig.tailwind.cssVariables\n\n  if (!opts.defaults) {\n    const [styles, baseColors] = await Promise.all([\n      getRegistryStyles(),\n      getRegistryBaseColors(),\n    ])\n\n    const options = await prompts([\n      {\n        type: \"select\",\n        name: \"style\",\n        message: `Which ${highlighter.info(\"style\")} would you like to use?`,\n        choices: styles.map((style) => ({\n          title: style.label,\n          value: style.name,\n        })),\n        initial: styles.findIndex((s) => s.name === style),\n      },\n      {\n        type: \"select\",\n        name: \"tailwindBaseColor\",\n        message: `Which color would you like to use as the ${highlighter.info(\n          \"base color\"\n        )}?`,\n        choices: baseColors.map((color) => ({\n          title: color.label,\n          value: color.name,\n        })),\n      },\n      {\n        type: \"toggle\",\n        name: \"tailwindCssVariables\",\n        message: `Would you like to use ${highlighter.info(\n          \"CSS variables\"\n        )} for theming?`,\n        initial: defaultConfig?.tailwind.cssVariables,\n        active: \"yes\",\n        inactive: \"no\",\n      },\n    ])\n\n    style = options.style\n    baseColor = options.tailwindBaseColor\n    cssVariables = options.tailwindCssVariables\n  }\n\n  return rawConfigSchema.parse({\n    $schema: defaultConfig?.$schema,\n    style,\n    tailwind: {\n      ...defaultConfig?.tailwind,\n      baseColor,\n      cssVariables,\n    },\n    rsc: defaultConfig?.rsc,\n    tsx: defaultConfig?.tsx,\n    aliases: defaultConfig?.aliases,\n    iconLibrary: defaultConfig?.iconLibrary,\n  })\n}\n","import path from \"path\"\nimport { initOptionsSchema } from \"@/src/commands/init\"\nimport * as ERRORS from \"@/src/utils/errors\"\nimport { getProjectInfo } from \"@/src/utils/get-project-info\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport fs from \"fs-extra\"\nimport { z } from \"zod\"\n\nexport async function preFlightInit(\n  options: z.infer<typeof initOptionsSchema>\n) {\n  const errors: Record<string, boolean> = {}\n\n  // Ensure target directory exists.\n  // Check for empty project. We assume if no package.json exists, the project is empty.\n  if (\n    !fs.existsSync(options.cwd) ||\n    !fs.existsSync(path.resolve(options.cwd, \"package.json\"))\n  ) {\n    errors[ERRORS.MISSING_DIR_OR_EMPTY_PROJECT] = true\n    return {\n      errors,\n      projectInfo: null,\n    }\n  }\n\n  const projectSpinner = spinner(`Preflight checks.`, {\n    silent: options.silent,\n  }).start()\n\n  if (\n    fs.existsSync(path.resolve(options.cwd, \"components.json\")) &&\n    !options.force\n  ) {\n    projectSpinner?.fail()\n    logger.break()\n    logger.error(\n      `A ${highlighter.info(\n        \"components.json\"\n      )} file already exists at ${highlighter.info(\n        options.cwd\n      )}.\\nTo start over, remove the ${highlighter.info(\n        \"components.json\"\n      )} file and run ${highlighter.info(\"init\")} again.`\n    )\n    logger.break()\n    process.exit(1)\n  }\n\n  projectSpinner?.succeed()\n\n  const frameworkSpinner = spinner(`Verifying framework.`, {\n    silent: options.silent,\n  }).start()\n  const projectInfo = await getProjectInfo(options.cwd)\n  if (!projectInfo || projectInfo?.framework.name === \"manual\") {\n    errors[ERRORS.UNSUPPORTED_FRAMEWORK] = true\n    frameworkSpinner?.fail()\n    logger.break()\n    if (projectInfo?.framework.links.installation) {\n      logger.error(\n        `We could not detect a supported framework at ${highlighter.info(\n          options.cwd\n        )}.\\n` +\n          `Visit ${highlighter.info(\n            projectInfo?.framework.links.installation\n          )} to manually configure your project.\\nOnce configured, you can use the cli to add components.`\n      )\n    }\n    logger.break()\n    process.exit(1)\n  }\n  frameworkSpinner?.succeed(\n    `Verifying framework. Found ${highlighter.info(\n      projectInfo.framework.label\n    )}.`\n  )\n\n  const tailwindSpinner = spinner(`Validating Tailwind CSS.`, {\n    silent: options.silent,\n  }).start()\n  if (!projectInfo?.tailwindConfigFile || !projectInfo?.tailwindCssFile) {\n    errors[ERRORS.TAILWIND_NOT_CONFIGURED] = true\n    tailwindSpinner?.fail()\n  } else {\n    tailwindSpinner?.succeed()\n  }\n\n  const tsConfigSpinner = spinner(`Validating import alias.`, {\n    silent: options.silent,\n  }).start()\n  if (!projectInfo?.aliasPrefix) {\n    errors[ERRORS.IMPORT_ALIAS_MISSING] = true\n    tsConfigSpinner?.fail()\n  } else {\n    tsConfigSpinner?.succeed()\n  }\n\n  if (Object.keys(errors).length > 0) {\n    if (errors[ERRORS.TAILWIND_NOT_CONFIGURED]) {\n      logger.break()\n      logger.error(\n        `No Tailwind CSS configuration found at ${highlighter.info(\n          options.cwd\n        )}.`\n      )\n      logger.error(\n        `It is likely you do not have Tailwind CSS installed or have an invalid configuration.`\n      )\n      logger.error(`Install Tailwind CSS then try again.`)\n      if (projectInfo?.framework.links.tailwind) {\n        logger.error(\n          `Visit ${highlighter.info(\n            projectInfo?.framework.links.tailwind\n          )} to get started.`\n        )\n      }\n    }\n\n    if (errors[ERRORS.IMPORT_ALIAS_MISSING]) {\n      logger.break()\n      logger.error(`No import alias found in your tsconfig.json file.`)\n      if (projectInfo?.framework.links.installation) {\n        logger.error(\n          `Visit ${highlighter.info(\n            projectInfo?.framework.links.installation\n          )} to learn how to set an import alias.`\n        )\n      }\n    }\n\n    logger.break()\n    process.exit(1)\n  }\n\n  return {\n    errors,\n    projectInfo,\n  }\n}\n","export const MISSING_DIR_OR_EMPTY_PROJECT = \"1\"\nexport const EXISTING_CONFIG = \"2\"\nexport const MISSING_CONFIG = \"3\"\nexport const FAILED_CONFIG_READ = \"4\"\nexport const TAILWIND_NOT_CONFIGURED = \"5\"\nexport const IMPORT_ALIAS_MISSING = \"6\"\nexport const UNSUPPORTED_FRAMEWORK = \"7\"\nexport const COMPONENT_URL_NOT_FOUND = \"8\"\nexport const COMPONENT_URL_UNAUTHORIZED = \"9\"\nexport const COMPONENT_URL_FORBIDDEN = \"10\"\nexport const COMPONENT_URL_BAD_REQUEST = \"11\"\nexport const COMPONENT_URL_INTERNAL_SERVER_ERROR = \"12\"\nexport const BUILD_MISSING_REGISTRY_FILE = \"13\"\n","import path from \"path\"\nimport { FRAMEWORKS, Framework } from \"@/src/utils/frameworks\"\nimport {\n  Config,\n  RawConfig,\n  getConfig,\n  resolveConfigPaths,\n} from \"@/src/utils/get-config\"\nimport { getPackageInfo } from \"@/src/utils/get-package-info\"\nimport fg from \"fast-glob\"\nimport fs from \"fs-extra\"\nimport { loadConfig } from \"tsconfig-paths\"\nimport { z } from \"zod\"\n\ntype ProjectInfo = {\n  framework: Framework\n  isSrcDir: boolean\n  isRSC: boolean\n  isTsx: boolean\n  tailwindConfigFile: string | null\n  tailwindCssFile: string | null\n  aliasPrefix: string | null\n}\n\nconst PROJECT_SHARED_IGNORE = [\n  \"**/node_modules/**\",\n  \".next\",\n  \"public\",\n  \"dist\",\n  \"build\",\n]\n\nconst TS_CONFIG_SCHEMA = z.object({\n  compilerOptions: z.object({\n    paths: z.record(z.string().or(z.array(z.string()))),\n  }),\n})\n\nexport async function getProjectInfo(cwd: string): Promise<ProjectInfo | null> {\n  const [\n    configFiles,\n    isSrcDir,\n    isTsx,\n    tailwindConfigFile,\n    tailwindCssFile,\n    aliasPrefix,\n    packageJson,\n  ] = await Promise.all([\n    fg.glob(\"**/{next,vite,astro}.config.*|gatsby-config.*|composer.json\", {\n      cwd,\n      deep: 3,\n      ignore: PROJECT_SHARED_IGNORE,\n    }),\n    fs.pathExists(path.resolve(cwd, \"src\")),\n    isTypeScriptProject(cwd),\n    getTailwindConfigFile(cwd),\n    getTailwindCssFile(cwd),\n    getTsConfigAliasPrefix(cwd),\n    getPackageInfo(cwd, false),\n  ])\n\n  const isUsingAppDir = await fs.pathExists(\n    path.resolve(cwd, `${isSrcDir ? \"src/\" : \"\"}app`)\n  )\n\n  const type: ProjectInfo = {\n    framework: FRAMEWORKS[\"manual\"],\n    isSrcDir,\n    isRSC: false,\n    isTsx,\n    tailwindConfigFile,\n    tailwindCssFile,\n    aliasPrefix,\n  }\n\n  // Next.js.\n  if (configFiles.find((file) => file.startsWith(\"next.config.\"))?.length) {\n    type.framework = isUsingAppDir\n      ? FRAMEWORKS[\"next-app\"]\n      : FRAMEWORKS[\"next-pages\"]\n    type.isRSC = isUsingAppDir\n    return type\n  }\n\n  // Astro.\n  if (configFiles.find((file) => file.startsWith(\"astro.config.\"))?.length) {\n    type.framework = FRAMEWORKS[\"astro\"]\n    return type\n  }\n\n  // Gatsby.\n  if (configFiles.find((file) => file.startsWith(\"gatsby-config.\"))?.length) {\n    type.framework = FRAMEWORKS[\"gatsby\"]\n    return type\n  }\n\n  // Laravel.\n  if (configFiles.find((file) => file.startsWith(\"composer.json\"))?.length) {\n    type.framework = FRAMEWORKS[\"laravel\"]\n    return type\n  }\n\n  // Remix.\n  if (\n    Object.keys(packageJson?.dependencies ?? {}).find((dep) =>\n      dep.startsWith(\"@remix-run/\")\n    )\n  ) {\n    type.framework = FRAMEWORKS[\"remix\"]\n    return type\n  }\n\n  // Vite.\n  // Some Remix templates also have a vite.config.* file.\n  // We'll assume that it got caught by the Remix check above.\n  if (configFiles.find((file) => file.startsWith(\"vite.config.\"))?.length) {\n    type.framework = FRAMEWORKS[\"vite\"]\n    return type\n  }\n\n  return type\n}\n\nexport async function getTailwindCssFile(cwd: string) {\n  const files = await fg.glob([\"**/*.css\", \"**/*.scss\"], {\n    cwd,\n    deep: 5,\n    ignore: PROJECT_SHARED_IGNORE,\n  })\n\n  if (!files.length) {\n    return null\n  }\n\n  for (const file of files) {\n    const contents = await fs.readFile(path.resolve(cwd, file), \"utf8\")\n    // Assume that if the file contains `@tailwind base` it's the main css file.\n    if (contents.includes(\"@tailwind base\")) {\n      return file\n    }\n  }\n\n  return null\n}\n\nexport async function getTailwindConfigFile(cwd: string) {\n  const files = await fg.glob(\"tailwind.config.*\", {\n    cwd,\n    deep: 3,\n    ignore: PROJECT_SHARED_IGNORE,\n  })\n\n  if (!files.length) {\n    return null\n  }\n\n  return files[0]\n}\n\nexport async function getTsConfigAliasPrefix(cwd: string) {\n  const tsConfig = await loadConfig(cwd)\n\n  if (\n    tsConfig?.resultType === \"failed\" ||\n    !Object.entries(tsConfig?.paths).length\n  ) {\n    return null\n  }\n\n  // This assume that the first alias is the prefix.\n  for (const [alias, paths] of Object.entries(tsConfig.paths)) {\n    if (\n      paths.includes(\"./*\") ||\n      paths.includes(\"./src/*\") ||\n      paths.includes(\"./app/*\") ||\n      paths.includes(\"./resources/js/*\") // Laravel.\n    ) {\n      return alias.replace(/\\/\\*$/, \"\") ?? null\n    }\n  }\n\n  // Use the first alias as the prefix.\n  return Object.keys(tsConfig?.paths)?.[0].replace(/\\/\\*$/, \"\") ?? null\n}\n\nexport async function isTypeScriptProject(cwd: string) {\n  const files = await fg.glob(\"tsconfig.*\", {\n    cwd,\n    deep: 1,\n    ignore: PROJECT_SHARED_IGNORE,\n  })\n\n  return files.length > 0\n}\n\nexport async function getTsConfig(cwd: string) {\n  for (const fallback of [\n    \"tsconfig.json\",\n    \"tsconfig.web.json\",\n    \"tsconfig.app.json\",\n  ]) {\n    const filePath = path.resolve(cwd, fallback)\n    if (!(await fs.pathExists(filePath))) {\n      continue\n    }\n\n    // We can't use fs.readJSON because it doesn't support comments.\n    const contents = await fs.readFile(filePath, \"utf8\")\n    const cleanedContents = contents.replace(/\\/\\*\\s*\\*\\//g, \"\")\n    const result = TS_CONFIG_SCHEMA.safeParse(JSON.parse(cleanedContents))\n\n    if (result.error) {\n      continue\n    }\n\n    return result.data\n  }\n\n  return null\n}\n\nexport async function getProjectConfig(\n  cwd: string,\n  defaultProjectInfo: ProjectInfo | null = null\n): Promise<Config | null> {\n  // Check for existing component config.\n  const [existingConfig, projectInfo] = await Promise.all([\n    getConfig(cwd),\n    !defaultProjectInfo\n      ? getProjectInfo(cwd)\n      : Promise.resolve(defaultProjectInfo),\n  ])\n\n  if (existingConfig) {\n    return existingConfig\n  }\n\n  if (\n    !projectInfo ||\n    !projectInfo.tailwindConfigFile ||\n    !projectInfo.tailwindCssFile\n  ) {\n    return null\n  }\n\n  const config: RawConfig = {\n    $schema: \"https://ui.shadcn.com/schema.json\",\n    rsc: projectInfo.isRSC,\n    tsx: projectInfo.isTsx,\n    style: \"new-york\",\n    tailwind: {\n      config: projectInfo.tailwindConfigFile,\n      baseColor: \"zinc\",\n      css: projectInfo.tailwindCssFile,\n      cssVariables: true,\n      prefix: \"\",\n    },\n    iconLibrary: \"lucide\",\n    aliases: {\n      components: `${projectInfo.aliasPrefix}/components`,\n      ui: `${projectInfo.aliasPrefix}/components/ui`,\n      hooks: `${projectInfo.aliasPrefix}/hooks`,\n      lib: `${projectInfo.aliasPrefix}/lib`,\n      utils: `${projectInfo.aliasPrefix}/lib/utils`,\n    },\n  }\n\n  return await resolveConfigPaths(cwd, config)\n}\n","export const FRAMEWORKS = {\n  \"next-app\": {\n    name: \"next-app\",\n    label: \"Next.js\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/next\",\n      tailwind: \"https://tailwindcss.com/docs/guides/nextjs\",\n    },\n  },\n  \"next-pages\": {\n    name: \"next-pages\",\n    label: \"Next.js\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/next\",\n      tailwind: \"https://tailwindcss.com/docs/guides/nextjs\",\n    },\n  },\n  remix: {\n    name: \"remix\",\n    label: \"Remix\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/remix\",\n      tailwind: \"https://tailwindcss.com/docs/guides/remix\",\n    },\n  },\n  vite: {\n    name: \"vite\",\n    label: \"Vite\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/vite\",\n      tailwind: \"https://tailwindcss.com/docs/guides/vite\",\n    },\n  },\n  astro: {\n    name: \"astro\",\n    label: \"Astro\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/astro\",\n      tailwind: \"https://tailwindcss.com/docs/guides/astro\",\n    },\n  },\n  laravel: {\n    name: \"laravel\",\n    label: \"Laravel\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/laravel\",\n      tailwind: \"https://tailwindcss.com/docs/guides/laravel\",\n    },\n  },\n  gatsby: {\n    name: \"gatsby\",\n    label: \"Gatsby\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/gatsby\",\n      tailwind: \"https://tailwindcss.com/docs/guides/gatsby\",\n    },\n  },\n  manual: {\n    name: \"manual\",\n    label: \"Manual\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/manual\",\n      tailwind: \"https://tailwindcss.com/docs/installation\",\n    },\n  },\n} as const\n\nexport type Framework = (typeof FRAMEWORKS)[keyof typeof FRAMEWORKS]\n","import path from \"path\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { resolveImport } from \"@/src/utils/resolve-import\"\nimport { cosmiconfig } from \"cosmiconfig\"\nimport fg from \"fast-glob\"\nimport fs from \"fs-extra\"\nimport { loadConfig } from \"tsconfig-paths\"\nimport { z } from \"zod\"\n\nexport const DEFAULT_STYLE = \"default\"\nexport const DEFAULT_COMPONENTS = \"@/components\"\nexport const DEFAULT_UTILS = \"@/lib/utils\"\nexport const DEFAULT_TAILWIND_CSS = \"app/globals.css\"\nexport const DEFAULT_TAILWIND_CONFIG = \"tailwind.config.js\"\nexport const DEFAULT_TAILWIND_BASE_COLOR = \"slate\"\n\n// TODO: Figure out if we want to support all cosmiconfig formats.\n// A simple components.json file would be nice.\nconst explorer = cosmiconfig(\"components\", {\n  searchPlaces: [\"components.json\"],\n})\n\nexport const rawConfigSchema = z\n  .object({\n    $schema: z.string().optional(),\n    style: z.string(),\n    rsc: z.coerce.boolean().default(false),\n    tsx: z.coerce.boolean().default(true),\n    tailwind: z.object({\n      config: z.string(),\n      css: z.string(),\n      baseColor: z.string(),\n      cssVariables: z.boolean().default(true),\n      prefix: z.string().default(\"\").optional(),\n    }),\n    aliases: z.object({\n      components: z.string(),\n      utils: z.string(),\n      ui: z.string().optional(),\n      lib: z.string().optional(),\n      hooks: z.string().optional(),\n    }),\n    iconLibrary: z.string().optional(),\n  })\n  .strict()\n\nexport type RawConfig = z.infer<typeof rawConfigSchema>\n\nexport const configSchema = rawConfigSchema.extend({\n  resolvedPaths: z.object({\n    cwd: z.string(),\n    tailwindConfig: z.string(),\n    tailwindCss: z.string(),\n    utils: z.string(),\n    components: z.string(),\n    lib: z.string(),\n    hooks: z.string(),\n    ui: z.string(),\n  }),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\n// TODO: type the key.\n// Okay for now since I don't want a breaking change.\nexport const workspaceConfigSchema = z.record(configSchema)\n\nexport async function getConfig(cwd: string) {\n  const config = await getRawConfig(cwd)\n\n  if (!config) {\n    return null\n  }\n\n  // Set default icon library if not provided.\n  if (!config.iconLibrary) {\n    config.iconLibrary = config.style === \"new-york\" ? \"radix\" : \"lucide\"\n  }\n\n  return await resolveConfigPaths(cwd, config)\n}\n\nexport async function resolveConfigPaths(cwd: string, config: RawConfig) {\n  // Read tsconfig.json.\n  const tsConfig = await loadConfig(cwd)\n\n  if (tsConfig.resultType === \"failed\") {\n    throw new Error(\n      `Failed to load ${config.tsx ? \"tsconfig\" : \"jsconfig\"}.json. ${\n        tsConfig.message ?? \"\"\n      }`.trim()\n    )\n  }\n\n  return configSchema.parse({\n    ...config,\n    resolvedPaths: {\n      cwd,\n      tailwindConfig: path.resolve(cwd, config.tailwind.config),\n      tailwindCss: path.resolve(cwd, config.tailwind.css),\n      utils: await resolveImport(config.aliases[\"utils\"], tsConfig),\n      components: await resolveImport(config.aliases[\"components\"], tsConfig),\n      ui: config.aliases[\"ui\"]\n        ? await resolveImport(config.aliases[\"ui\"], tsConfig)\n        : path.resolve(\n            (await resolveImport(config.aliases[\"components\"], tsConfig)) ??\n              cwd,\n            \"ui\"\n          ),\n      // TODO: Make this configurable.\n      // For now, we assume the lib and hooks directories are one level up from the components directory.\n      lib: config.aliases[\"lib\"]\n        ? await resolveImport(config.aliases[\"lib\"], tsConfig)\n        : path.resolve(\n            (await resolveImport(config.aliases[\"utils\"], tsConfig)) ?? cwd,\n            \"..\"\n          ),\n      hooks: config.aliases[\"hooks\"]\n        ? await resolveImport(config.aliases[\"hooks\"], tsConfig)\n        : path.resolve(\n            (await resolveImport(config.aliases[\"components\"], tsConfig)) ??\n              cwd,\n            \"..\",\n            \"hooks\"\n          ),\n    },\n  })\n}\n\nexport async function getRawConfig(cwd: string): Promise<RawConfig | null> {\n  try {\n    const configResult = await explorer.search(cwd)\n\n    if (!configResult) {\n      return null\n    }\n\n    return rawConfigSchema.parse(configResult.config)\n  } catch (error) {\n    const componentPath = `${cwd}/components.json`\n    throw new Error(\n      `Invalid configuration found in ${highlighter.info(componentPath)}.`\n    )\n  }\n}\n\n// Note: we can check for -workspace.yaml or \"workspace\" in package.json.\n// Since cwd is not necessarily the root of the project.\n// We'll instead check if ui aliases resolve to a different root.\nexport async function getWorkspaceConfig(config: Config) {\n  let resolvedAliases: any = {}\n\n  for (const key of Object.keys(config.aliases)) {\n    if (!isAliasKey(key, config)) {\n      continue\n    }\n\n    const resolvedPath = config.resolvedPaths[key]\n    const packageRoot = await findPackageRoot(\n      config.resolvedPaths.cwd,\n      resolvedPath\n    )\n\n    if (!packageRoot) {\n      resolvedAliases[key] = config\n      continue\n    }\n\n    resolvedAliases[key] = await getConfig(packageRoot)\n  }\n\n  const result = workspaceConfigSchema.safeParse(resolvedAliases)\n  if (!result.success) {\n    return null\n  }\n\n  return result.data\n}\n\nexport async function findPackageRoot(cwd: string, resolvedPath: string) {\n  const commonRoot = findCommonRoot(cwd, resolvedPath)\n  const relativePath = path.relative(commonRoot, resolvedPath)\n\n  const packageRoots = await fg.glob(\"**/package.json\", {\n    cwd: commonRoot,\n    deep: 3,\n    ignore: [\"**/node_modules/**\", \"**/dist/**\", \"**/build/**\", \"**/public/**\"],\n  })\n\n  const matchingPackageRoot = packageRoots\n    .map((pkgPath) => path.dirname(pkgPath))\n    .find((pkgDir) => relativePath.startsWith(pkgDir))\n\n  return matchingPackageRoot ? path.join(commonRoot, matchingPackageRoot) : null\n}\n\nfunction isAliasKey(\n  key: string,\n  config: Config\n): key is keyof Config[\"aliases\"] {\n  return Object.keys(config.resolvedPaths)\n    .filter((key) => key !== \"utils\")\n    .includes(key)\n}\n\nexport function findCommonRoot(cwd: string, resolvedPath: string) {\n  const parts1 = cwd.split(path.sep)\n  const parts2 = resolvedPath.split(path.sep)\n  const commonParts = []\n\n  for (let i = 0; i < Math.min(parts1.length, parts2.length); i++) {\n    if (parts1[i] !== parts2[i]) {\n      break\n    }\n    commonParts.push(parts1[i])\n  }\n\n  return commonParts.join(path.sep)\n}\n","import { cyan, green, red, yellow } from \"kleur/colors\"\n\nexport const highlighter = {\n  error: red,\n  warn: yellow,\n  info: cyan,\n  success: green,\n}\n","import { createMatchPath, type ConfigLoaderSuccessResult } from \"tsconfig-paths\"\n\nexport async function resolveImport(\n  importPath: string,\n  config: Pick<ConfigLoaderSuccessResult, \"absoluteBaseUrl\" | \"paths\">\n) {\n  return createMatchPath(config.absoluteBaseUrl, config.paths)(\n    importPath,\n    undefined,\n    () => true,\n    [\".ts\", \".tsx\"]\n  )\n}\n","import path from \"path\"\nimport fs from \"fs-extra\"\nimport { type PackageJson } from \"type-fest\"\n\nexport function getPackageInfo(\n  cwd: string = \"\",\n  shouldThrow: boolean = true\n): PackageJson | null {\n  const packageJsonPath = path.join(cwd, \"package.json\")\n\n  return fs.readJSONSync(packageJsonPath, {\n    throws: shouldThrow,\n  }) as PackageJson\n}\n","import { highlighter } from \"@/src/utils/highlighter\"\n\nexport const logger = {\n  error(...args: unknown[]) {\n    console.log(highlighter.error(args.join(\" \")))\n  },\n  warn(...args: unknown[]) {\n    console.log(highlighter.warn(args.join(\" \")))\n  },\n  info(...args: unknown[]) {\n    console.log(highlighter.info(args.join(\" \")))\n  },\n  success(...args: unknown[]) {\n    console.log(highlighter.success(args.join(\" \")))\n  },\n  log(...args: unknown[]) {\n    console.log(args.join(\" \"))\n  },\n  break() {\n    console.log(\"\")\n  },\n}\n","import ora, { type Options } from \"ora\"\n\nexport function spinner(\n  text: Options[\"text\"],\n  options?: {\n    silent?: boolean\n  }\n) {\n  return ora({\n    text,\n    isSilent: options?.silent,\n  })\n}\n","import path from \"path\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { buildTailwindThemeColorsFromCssVars } from \"@/src/utils/updaters/update-tailwind-config\"\nimport deepmerge from \"deepmerge\"\nimport { HttpsProxyAgent } from \"https-proxy-agent\"\nimport fetch from \"node-fetch\"\nimport { z } from \"zod\"\n\nimport {\n  iconsSchema,\n  registryBaseColorSchema,\n  registryIndexSchema,\n  registryItemFileSchema,\n  registryItemSchema,\n  registryResolvedItemsTreeSchema,\n  stylesSchema,\n} from \"./schema\"\n\nconst REGISTRY_URL = process.env.REGISTRY_URL ?? \"https://ui.shadcn.com/r\"\n\nconst agent = process.env.https_proxy\n  ? new HttpsProxyAgent(process.env.https_proxy)\n  : undefined\n\nexport async function getRegistryIndex() {\n  try {\n    const [result] = await fetchRegistry([\"index.json\"])\n\n    return registryIndexSchema.parse(result)\n  } catch (error) {\n    logger.error(\"\\n\")\n    handleError(error)\n  }\n}\n\nexport async function getRegistryStyles() {\n  try {\n    const [result] = await fetchRegistry([\"styles/index.json\"])\n\n    return stylesSchema.parse(result)\n  } catch (error) {\n    logger.error(\"\\n\")\n    handleError(error)\n    return []\n  }\n}\n\nexport async function getRegistryIcons() {\n  try {\n    const [result] = await fetchRegistry([\"icons/index.json\"])\n    return iconsSchema.parse(result)\n  } catch (error) {\n    handleError(error)\n    return {}\n  }\n}\n\nexport async function getRegistryItem(name: string, style: string) {\n  try {\n    const [result] = await fetchRegistry([\n      isUrl(name) ? name : `styles/${style}/${name}.json`,\n    ])\n\n    return registryItemSchema.parse(result)\n  } catch (error) {\n    logger.break()\n    handleError(error)\n    return null\n  }\n}\n\nexport async function getRegistryBaseColors() {\n  return [\n    {\n      name: \"neutral\",\n      label: \"Neutral\",\n    },\n    {\n      name: \"gray\",\n      label: \"Gray\",\n    },\n    {\n      name: \"zinc\",\n      label: \"Zinc\",\n    },\n    {\n      name: \"stone\",\n      label: \"Stone\",\n    },\n    {\n      name: \"slate\",\n      label: \"Slate\",\n    },\n  ]\n}\n\nexport async function getRegistryBaseColor(baseColor: string) {\n  try {\n    const [result] = await fetchRegistry([`colors/${baseColor}.json`])\n\n    return registryBaseColorSchema.parse(result)\n  } catch (error) {\n    handleError(error)\n  }\n}\n\nexport async function resolveTree(\n  index: z.infer<typeof registryIndexSchema>,\n  names: string[]\n) {\n  const tree: z.infer<typeof registryIndexSchema> = []\n\n  for (const name of names) {\n    const entry = index.find((entry) => entry.name === name)\n\n    if (!entry) {\n      continue\n    }\n\n    tree.push(entry)\n\n    if (entry.registryDependencies) {\n      const dependencies = await resolveTree(index, entry.registryDependencies)\n      tree.push(...dependencies)\n    }\n  }\n\n  return tree.filter(\n    (component, index, self) =>\n      self.findIndex((c) => c.name === component.name) === index\n  )\n}\n\nexport async function fetchTree(\n  style: string,\n  tree: z.infer<typeof registryIndexSchema>\n) {\n  try {\n    const paths = tree.map((item) => `styles/${style}/${item.name}.json`)\n    const result = await fetchRegistry(paths)\n    return registryIndexSchema.parse(result)\n  } catch (error) {\n    handleError(error)\n  }\n}\n\nexport async function getItemTargetPath(\n  config: Config,\n  item: Pick<z.infer<typeof registryItemSchema>, \"type\">,\n  override?: string\n) {\n  if (override) {\n    return override\n  }\n\n  if (item.type === \"registry:ui\") {\n    return config.resolvedPaths.ui ?? config.resolvedPaths.components\n  }\n\n  const [parent, type] = item.type?.split(\":\") ?? []\n  if (!(parent in config.resolvedPaths)) {\n    return null\n  }\n\n  return path.join(\n    config.resolvedPaths[parent as keyof typeof config.resolvedPaths],\n    type\n  )\n}\n\nexport async function fetchRegistry(paths: string[]) {\n  try {\n    const results = await Promise.all(\n      paths.map(async (path) => {\n        const url = getRegistryUrl(path)\n        const response = await fetch(url, { agent })\n\n        if (!response.ok) {\n          const errorMessages: { [key: number]: string } = {\n            400: \"Bad request\",\n            401: \"Unauthorized\",\n            403: \"Forbidden\",\n            404: \"Not found\",\n            500: \"Internal server error\",\n          }\n\n          if (response.status === 401) {\n            throw new Error(\n              `You are not authorized to access the component at ${highlighter.info(\n                url\n              )}.\\nIf this is a remote registry, you may need to authenticate.`\n            )\n          }\n\n          if (response.status === 404) {\n            throw new Error(\n              `The component at ${highlighter.info(\n                url\n              )} was not found.\\nIt may not exist at the registry. Please make sure it is a valid component.`\n            )\n          }\n\n          if (response.status === 403) {\n            throw new Error(\n              `You do not have access to the component at ${highlighter.info(\n                url\n              )}.\\nIf this is a remote registry, you may need to authenticate or a token.`\n            )\n          }\n\n          const result = await response.json()\n          const message =\n            result && typeof result === \"object\" && \"error\" in result\n              ? result.error\n              : response.statusText || errorMessages[response.status]\n          throw new Error(\n            `Failed to fetch from ${highlighter.info(url)}.\\n${message}`\n          )\n        }\n\n        return response.json()\n      })\n    )\n\n    return results\n  } catch (error) {\n    logger.error(\"\\n\")\n    handleError(error)\n    return []\n  }\n}\n\nexport async function registryResolveItemsTree(\n  names: z.infer<typeof registryItemSchema>[\"name\"][],\n  config: Config\n) {\n  try {\n    const index = await getRegistryIndex()\n    if (!index) {\n      return null\n    }\n\n    // If we're resolving the index, we want it to go first.\n    if (names.includes(\"index\")) {\n      names.unshift(\"index\")\n    }\n\n    let registryItems = await resolveRegistryItems(names, config)\n    let result = await fetchRegistry(registryItems)\n    const payload = z.array(registryItemSchema).parse(result)\n\n    if (!payload) {\n      return null\n    }\n\n    // If we're resolving the index, we want to fetch\n    // the theme item if a base color is provided.\n    // We do this for index only.\n    // Other components will ship with their theme tokens.\n    if (names.includes(\"index\")) {\n      if (config.tailwind.baseColor) {\n        const theme = await registryGetTheme(config.tailwind.baseColor, config)\n        if (theme) {\n          payload.unshift(theme)\n        }\n      }\n    }\n\n    let tailwind = {}\n    payload.forEach((item) => {\n      tailwind = deepmerge(tailwind, item.tailwind ?? {})\n    })\n\n    let cssVars = {}\n    payload.forEach((item) => {\n      cssVars = deepmerge(cssVars, item.cssVars ?? {})\n    })\n\n    let docs = \"\"\n    payload.forEach((item) => {\n      if (item.docs) {\n        docs += `${item.docs}\\n`\n      }\n    })\n\n    return registryResolvedItemsTreeSchema.parse({\n      dependencies: deepmerge.all(\n        payload.map((item) => item.dependencies ?? [])\n      ),\n      devDependencies: deepmerge.all(\n        payload.map((item) => item.devDependencies ?? [])\n      ),\n      files: deepmerge.all(payload.map((item) => item.files ?? [])),\n      tailwind,\n      cssVars,\n      docs,\n    })\n  } catch (error) {\n    handleError(error)\n    return null\n  }\n}\n\nasync function resolveRegistryDependencies(\n  url: string,\n  config: Config\n): Promise<string[]> {\n  const visited = new Set<string>()\n  const payload: string[] = []\n\n  async function resolveDependencies(itemUrl: string) {\n    const url = getRegistryUrl(\n      isUrl(itemUrl) ? itemUrl : `styles/${config.style}/${itemUrl}.json`\n    )\n\n    if (visited.has(url)) {\n      return\n    }\n\n    visited.add(url)\n\n    try {\n      const [result] = await fetchRegistry([url])\n      const item = registryItemSchema.parse(result)\n      payload.push(url)\n\n      if (item.registryDependencies) {\n        for (const dependency of item.registryDependencies) {\n          await resolveDependencies(dependency)\n        }\n      }\n    } catch (error) {\n      console.error(\n        `Error fetching or parsing registry item at ${itemUrl}:`,\n        error\n      )\n    }\n  }\n\n  await resolveDependencies(url)\n  return Array.from(new Set(payload))\n}\n\nexport async function registryGetTheme(name: string, config: Config) {\n  const baseColor = await getRegistryBaseColor(name)\n  if (!baseColor) {\n    return null\n  }\n\n  // TODO: Move this to the registry i.e registry:theme.\n  const theme = {\n    name,\n    type: \"registry:theme\",\n    tailwind: {\n      config: {\n        theme: {\n          extend: {\n            borderRadius: {\n              lg: \"var(--radius)\",\n              md: \"calc(var(--radius) - 2px)\",\n              sm: \"calc(var(--radius) - 4px)\",\n            },\n            colors: {},\n          },\n        },\n      },\n    },\n    cssVars: {\n      light: {\n        radius: \"0.5rem\",\n      },\n      dark: {},\n    },\n  } satisfies z.infer<typeof registryItemSchema>\n\n  if (config.tailwind.cssVariables) {\n    theme.tailwind.config.theme.extend.colors = {\n      ...theme.tailwind.config.theme.extend.colors,\n      ...buildTailwindThemeColorsFromCssVars(baseColor.cssVars.dark),\n    }\n    theme.cssVars = {\n      light: {\n        ...baseColor.cssVars.light,\n        ...theme.cssVars.light,\n      },\n      dark: {\n        ...baseColor.cssVars.dark,\n        ...theme.cssVars.dark,\n      },\n    }\n  }\n\n  return theme\n}\n\nfunction getRegistryUrl(path: string) {\n  if (isUrl(path)) {\n    // If the url contains /chat/b/, we assume it's the v0 registry.\n    // We need to add the /json suffix if it's missing.\n    const url = new URL(path)\n    if (url.pathname.match(/\\/chat\\/b\\//) && !url.pathname.endsWith(\"/json\")) {\n      url.pathname = `${url.pathname}/json`\n    }\n\n    return url.toString()\n  }\n\n  return `${REGISTRY_URL}/${path}`\n}\n\nfunction isUrl(path: string) {\n  try {\n    new URL(path)\n    return true\n  } catch (error) {\n    return false\n  }\n}\n\n// TODO: We're double-fetching here. Use a cache.\nexport async function resolveRegistryItems(names: string[], config: Config) {\n  let registryDependencies: string[] = []\n  for (const name of names) {\n    const itemRegistryDependencies = await resolveRegistryDependencies(\n      name,\n      config\n    )\n    registryDependencies.push(...itemRegistryDependencies)\n  }\n\n  return Array.from(new Set(registryDependencies))\n}\n\nexport function getRegistryTypeAliasMap() {\n  return new Map<string, string>([\n    [\"registry:ui\", \"ui\"],\n    [\"registry:lib\", \"lib\"],\n    [\"registry:hook\", \"hooks\"],\n    [\"registry:block\", \"components\"],\n    [\"registry:component\", \"components\"],\n  ])\n}\n\n// Track a dependency and its parent.\nexport function getRegistryParentMap(\n  registryItems: z.infer<typeof registryItemSchema>[]\n) {\n  const map = new Map<string, z.infer<typeof registryItemSchema>>()\n  registryItems.forEach((item) => {\n    if (!item.registryDependencies) {\n      return\n    }\n\n    item.registryDependencies.forEach((dependency) => {\n      map.set(dependency, item)\n    })\n  })\n  return map\n}\n","import { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { z } from \"zod\"\n\nexport function handleError(error: unknown) {\n  logger.error(\n    `Something went wrong. Please check the error below for more details.`\n  )\n  logger.error(`If the problem persists, please open an issue on GitHub.`)\n  logger.error(\"\")\n  if (typeof error === \"string\") {\n    logger.error(error)\n    logger.break()\n    process.exit(1)\n  }\n\n  if (error instanceof z.ZodError) {\n    logger.error(\"Validation failed:\")\n    for (const [key, value] of Object.entries(error.flatten().fieldErrors)) {\n      logger.error(`- ${highlighter.info(key)}: ${value}`)\n    }\n    logger.break()\n    process.exit(1)\n  }\n\n  if (error instanceof Error) {\n    logger.error(error.message)\n    logger.break()\n    process.exit(1)\n  }\n\n  logger.break()\n  process.exit(1)\n}\n","import { promises as fs } from \"fs\"\nimport { tmpdir } from \"os\"\nimport path from \"path\"\nimport { registryItemTailwindSchema } from \"@/src/registry/schema\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport deepmerge from \"deepmerge\"\nimport objectToString from \"stringify-object\"\nimport { type Config as TailwindConfig } from \"tailwindcss\"\nimport {\n  ArrayLiteralExpression,\n  ObjectLiteralExpression,\n  Project,\n  PropertyAssignment,\n  QuoteKind,\n  ScriptKind,\n  SyntaxKind,\n  VariableStatement,\n} from \"ts-morph\"\nimport { z } from \"zod\"\n\nexport type UpdaterTailwindConfig = Omit<TailwindConfig, \"plugins\"> & {\n  // We only want string plugins for now.\n  plugins?: string[]\n}\n\nexport async function updateTailwindConfig(\n  tailwindConfig:\n    | z.infer<typeof registryItemTailwindSchema>[\"config\"]\n    | undefined,\n  config: Config,\n  options: {\n    silent?: boolean\n  }\n) {\n  if (!tailwindConfig) {\n    return\n  }\n\n  options = {\n    silent: false,\n    ...options,\n  }\n\n  const tailwindFileRelativePath = path.relative(\n    config.resolvedPaths.cwd,\n    config.resolvedPaths.tailwindConfig\n  )\n  const tailwindSpinner = spinner(\n    `Updating ${highlighter.info(tailwindFileRelativePath)}`,\n    {\n      silent: options.silent,\n    }\n  ).start()\n  const raw = await fs.readFile(config.resolvedPaths.tailwindConfig, \"utf8\")\n  const output = await transformTailwindConfig(raw, tailwindConfig, config)\n  await fs.writeFile(config.resolvedPaths.tailwindConfig, output, \"utf8\")\n  tailwindSpinner?.succeed()\n}\n\nexport async function transformTailwindConfig(\n  input: string,\n  tailwindConfig: UpdaterTailwindConfig,\n  config: Config\n) {\n  const sourceFile = await _createSourceFile(input, config)\n  // Find the object with content property.\n  // This is faster than traversing the default export.\n  // TODO: maybe we do need to traverse the default export?\n  const configObject = sourceFile\n    .getDescendantsOfKind(SyntaxKind.ObjectLiteralExpression)\n    .find((node) =>\n      node\n        .getProperties()\n        .some(\n          (property) =>\n            property.isKind(SyntaxKind.PropertyAssignment) &&\n            property.getName() === \"content\"\n        )\n    )\n\n  // We couldn't find the config object, so we return the input as is.\n  if (!configObject) {\n    return input\n  }\n\n  const quoteChar = _getQuoteChar(configObject)\n\n  // Add darkMode.\n  addTailwindConfigProperty(\n    configObject,\n    {\n      name: \"darkMode\",\n      value: \"class\",\n    },\n    { quoteChar }\n  )\n\n  // Add Tailwind config plugins.\n  tailwindConfig.plugins?.forEach((plugin) => {\n    addTailwindConfigPlugin(configObject, plugin)\n  })\n\n  // Add Tailwind config theme.\n  if (tailwindConfig.theme) {\n    await addTailwindConfigTheme(configObject, tailwindConfig.theme)\n  }\n\n  return sourceFile.getFullText()\n}\n\nfunction addTailwindConfigProperty(\n  configObject: ObjectLiteralExpression,\n  property: {\n    name: string\n    value: string\n  },\n  {\n    quoteChar,\n  }: {\n    quoteChar: string\n  }\n) {\n  const existingProperty = configObject.getProperty(\"darkMode\")\n\n  if (!existingProperty) {\n    const newProperty = {\n      name: property.name,\n      initializer: `[${quoteChar}${property.value}${quoteChar}]`,\n    }\n\n    // We need to add darkMode as the first property.\n    if (property.name === \"darkMode\") {\n      configObject.insertPropertyAssignment(0, newProperty)\n      return configObject\n    }\n\n    configObject.addPropertyAssignment(newProperty)\n\n    return configObject\n  }\n\n  if (existingProperty.isKind(SyntaxKind.PropertyAssignment)) {\n    const initializer = existingProperty.getInitializer()\n    const newValue = `${quoteChar}${property.value}${quoteChar}`\n\n    // If property is a string, change it to an array and append.\n    if (initializer?.isKind(SyntaxKind.StringLiteral)) {\n      const initializerText = initializer.getText()\n      initializer.replaceWithText(`[${initializerText}, ${newValue}]`)\n      return configObject\n    }\n\n    // If property is an array, append.\n    if (initializer?.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      // Check if the array already contains the value.\n      if (\n        initializer\n          .getElements()\n          .map((element) => element.getText())\n          .includes(newValue)\n      ) {\n        return configObject\n      }\n      initializer.addElement(newValue)\n    }\n\n    return configObject\n  }\n\n  return configObject\n}\n\nasync function addTailwindConfigTheme(\n  configObject: ObjectLiteralExpression,\n  theme: UpdaterTailwindConfig[\"theme\"]\n) {\n  // Ensure there is a theme property.\n  if (!configObject.getProperty(\"theme\")) {\n    configObject.addPropertyAssignment({\n      name: \"theme\",\n      initializer: \"{}\",\n    })\n  }\n\n  // Nest all spread properties.\n  nestSpreadProperties(configObject)\n\n  const themeProperty = configObject\n    .getPropertyOrThrow(\"theme\")\n    ?.asKindOrThrow(SyntaxKind.PropertyAssignment)\n\n  const themeInitializer = themeProperty.getInitializer()\n  if (themeInitializer?.isKind(SyntaxKind.ObjectLiteralExpression)) {\n    const themeObjectString = themeInitializer.getText()\n    const themeObject = await parseObjectLiteral(themeObjectString)\n    const result = deepmerge(themeObject, theme, {\n      arrayMerge: (dst, src) => src,\n    })\n    const resultString = objectToString(result)\n      .replace(/\\'\\.\\.\\.(.*)\\'/g, \"...$1\") // Remove quote around spread element\n      .replace(/\\'\\\"/g, \"'\") // Replace `\\\" with \"\n      .replace(/\\\"\\'/g, \"'\") // Replace `\\\" with \"\n      .replace(/\\'\\[/g, \"[\") // Replace `[ with [\n      .replace(/\\]\\'/g, \"]\") // Replace `] with ]\n      .replace(/\\'\\\\\\'/g, \"'\") // Replace `\\' with '\n      .replace(/\\\\\\'/g, \"'\") // Replace \\' with '\n      .replace(/\\\\\\'\\'/g, \"'\")\n      .replace(/\\'\\'/g, \"'\")\n    themeInitializer.replaceWithText(resultString)\n  }\n\n  // Unnest all spread properties.\n  unnestSpreadProperties(configObject)\n}\n\nfunction addTailwindConfigPlugin(\n  configObject: ObjectLiteralExpression,\n  plugin: string\n) {\n  const existingPlugins = configObject.getProperty(\"plugins\")\n\n  if (!existingPlugins) {\n    configObject.addPropertyAssignment({\n      name: \"plugins\",\n      initializer: `[${plugin}]`,\n    })\n\n    return configObject\n  }\n\n  if (existingPlugins.isKind(SyntaxKind.PropertyAssignment)) {\n    const initializer = existingPlugins.getInitializer()\n\n    if (initializer?.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      if (\n        initializer\n          .getElements()\n          .map((element) => {\n            return element.getText().replace(/[\"']/g, \"\")\n          })\n          .includes(plugin.replace(/[\"']/g, \"\"))\n      ) {\n        return configObject\n      }\n      initializer.addElement(plugin)\n    }\n\n    return configObject\n  }\n\n  return configObject\n}\n\nexport async function _createSourceFile(input: string, config: Config | null) {\n  const dir = await fs.mkdtemp(path.join(tmpdir(), \"shadcn-\"))\n  const resolvedPath =\n    config?.resolvedPaths?.tailwindConfig || \"tailwind.config.ts\"\n  const tempFile = path.join(dir, `shadcn-${path.basename(resolvedPath)}`)\n\n  const project = new Project({\n    compilerOptions: {},\n  })\n  const sourceFile = project.createSourceFile(tempFile, input, {\n    // Note: .js and .mjs can still be valid for TS projects.\n    // We can't infer TypeScript from config.tsx.\n    scriptKind:\n      path.extname(resolvedPath) === \".ts\" ? ScriptKind.TS : ScriptKind.JS,\n  })\n\n  return sourceFile\n}\n\nexport function _getQuoteChar(configObject: ObjectLiteralExpression) {\n  return configObject\n    .getFirstDescendantByKind(SyntaxKind.StringLiteral)\n    ?.getQuoteKind() === QuoteKind.Single\n    ? \"'\"\n    : '\"'\n}\n\nexport function nestSpreadProperties(obj: ObjectLiteralExpression) {\n  const properties = obj.getProperties()\n\n  for (let i = 0; i < properties.length; i++) {\n    const prop = properties[i]\n    if (prop.isKind(SyntaxKind.SpreadAssignment)) {\n      const spreadAssignment = prop.asKindOrThrow(SyntaxKind.SpreadAssignment)\n      const spreadText = spreadAssignment.getExpression().getText()\n\n      // Replace spread with a property assignment\n      obj.insertPropertyAssignment(i, {\n        // Need to escape the name with \" so that deepmerge doesn't mishandle the key\n        name: `\"___${spreadText.replace(/^\\.\\.\\./, \"\")}\"`,\n        initializer: `\"...${spreadText.replace(/^\\.\\.\\./, \"\")}\"`,\n      })\n\n      // Remove the original spread assignment\n      spreadAssignment.remove()\n    } else if (prop.isKind(SyntaxKind.PropertyAssignment)) {\n      const propAssignment = prop.asKindOrThrow(SyntaxKind.PropertyAssignment)\n      const initializer = propAssignment.getInitializer()\n\n      if (\n        initializer &&\n        initializer.isKind(SyntaxKind.ObjectLiteralExpression)\n      ) {\n        // Recursively process nested object literals\n        nestSpreadProperties(\n          initializer.asKindOrThrow(SyntaxKind.ObjectLiteralExpression)\n        )\n      } else if (\n        initializer &&\n        initializer.isKind(SyntaxKind.ArrayLiteralExpression)\n      ) {\n        nestSpreadElements(\n          initializer.asKindOrThrow(SyntaxKind.ArrayLiteralExpression)\n        )\n      }\n    }\n  }\n}\n\nexport function nestSpreadElements(arr: ArrayLiteralExpression) {\n  const elements = arr.getElements()\n  for (let j = 0; j < elements.length; j++) {\n    const element = elements[j]\n    if (element.isKind(SyntaxKind.ObjectLiteralExpression)) {\n      // Recursive check on objects within arrays\n      nestSpreadProperties(\n        element.asKindOrThrow(SyntaxKind.ObjectLiteralExpression)\n      )\n    } else if (element.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      // Recursive check on nested arrays\n      nestSpreadElements(\n        element.asKindOrThrow(SyntaxKind.ArrayLiteralExpression)\n      )\n    } else if (element.isKind(SyntaxKind.SpreadElement)) {\n      const spreadText = element.getText()\n      // Spread element within an array\n      arr.removeElement(j)\n      arr.insertElement(j, `\"${spreadText}\"`)\n    }\n  }\n}\n\nexport function unnestSpreadProperties(obj: ObjectLiteralExpression) {\n  const properties = obj.getProperties()\n\n  for (let i = 0; i < properties.length; i++) {\n    const prop = properties[i]\n    if (prop.isKind(SyntaxKind.PropertyAssignment)) {\n      const propAssignment = prop as PropertyAssignment\n      const initializer = propAssignment.getInitializer()\n\n      if (initializer && initializer.isKind(SyntaxKind.StringLiteral)) {\n        const value = initializer\n          .asKindOrThrow(SyntaxKind.StringLiteral)\n          .getLiteralValue()\n        if (value.startsWith(\"...\")) {\n          obj.insertSpreadAssignment(i, { expression: value.slice(3) })\n          propAssignment.remove()\n        }\n      } else if (initializer?.isKind(SyntaxKind.ObjectLiteralExpression)) {\n        unnestSpreadProperties(initializer as ObjectLiteralExpression)\n      } else if (\n        initializer &&\n        initializer.isKind(SyntaxKind.ArrayLiteralExpression)\n      ) {\n        unnsetSpreadElements(\n          initializer.asKindOrThrow(SyntaxKind.ArrayLiteralExpression)\n        )\n      }\n    }\n  }\n}\n\nexport function unnsetSpreadElements(arr: ArrayLiteralExpression) {\n  const elements = arr.getElements()\n  for (let j = 0; j < elements.length; j++) {\n    const element = elements[j]\n    if (element.isKind(SyntaxKind.ObjectLiteralExpression)) {\n      // Recursive check on objects within arrays\n      unnestSpreadProperties(\n        element.asKindOrThrow(SyntaxKind.ObjectLiteralExpression)\n      )\n    } else if (element.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      // Recursive check on nested arrays\n      unnsetSpreadElements(\n        element.asKindOrThrow(SyntaxKind.ArrayLiteralExpression)\n      )\n    } else if (element.isKind(SyntaxKind.StringLiteral)) {\n      const spreadText = element.getText()\n      // check if spread element\n      const spreadTest = /(?:^['\"])(\\.\\.\\..*)(?:['\"]$)/g\n      if (spreadTest.test(spreadText)) {\n        arr.removeElement(j)\n        arr.insertElement(j, spreadText.replace(spreadTest, \"$1\"))\n      }\n    }\n  }\n}\n\nasync function parseObjectLiteral(objectLiteralString: string): Promise<any> {\n  const sourceFile = await _createSourceFile(\n    `const theme = ${objectLiteralString}`,\n    null\n  )\n\n  const statement = sourceFile.getStatements()[0]\n  if (statement?.getKind() === SyntaxKind.VariableStatement) {\n    const declaration = (statement as VariableStatement)\n      .getDeclarationList()\n      ?.getDeclarations()[0]\n    const initializer = declaration.getInitializer()\n    if (initializer?.isKind(SyntaxKind.ObjectLiteralExpression)) {\n      return await parseObjectLiteralExpression(initializer)\n    }\n  }\n\n  throw new Error(\"Invalid input: not an object literal\")\n}\n\nfunction parseObjectLiteralExpression(node: ObjectLiteralExpression): any {\n  const result: any = {}\n  for (const property of node.getProperties()) {\n    if (property.isKind(SyntaxKind.PropertyAssignment)) {\n      const name = property.getName().replace(/\\'/g, \"\")\n      if (\n        property.getInitializer()?.isKind(SyntaxKind.ObjectLiteralExpression)\n      ) {\n        result[name] = parseObjectLiteralExpression(\n          property.getInitializer() as ObjectLiteralExpression\n        )\n      } else if (\n        property.getInitializer()?.isKind(SyntaxKind.ArrayLiteralExpression)\n      ) {\n        result[name] = parseArrayLiteralExpression(\n          property.getInitializer() as ArrayLiteralExpression\n        )\n      } else {\n        result[name] = parseValue(property.getInitializer())\n      }\n    }\n  }\n  return result\n}\n\nfunction parseArrayLiteralExpression(node: ArrayLiteralExpression): any[] {\n  const result: any[] = []\n  for (const element of node.getElements()) {\n    if (element.isKind(SyntaxKind.ObjectLiteralExpression)) {\n      result.push(\n        parseObjectLiteralExpression(\n          element.asKindOrThrow(SyntaxKind.ObjectLiteralExpression)\n        )\n      )\n    } else if (element.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      result.push(\n        parseArrayLiteralExpression(\n          element.asKindOrThrow(SyntaxKind.ArrayLiteralExpression)\n        )\n      )\n    } else {\n      result.push(parseValue(element))\n    }\n  }\n  return result\n}\n\nfunction parseValue(node: any): any {\n  switch (node.getKind()) {\n    case SyntaxKind.StringLiteral:\n      return node.getText()\n    case SyntaxKind.NumericLiteral:\n      return Number(node.getText())\n    case SyntaxKind.TrueKeyword:\n      return true\n    case SyntaxKind.FalseKeyword:\n      return false\n    case SyntaxKind.NullKeyword:\n      return null\n    case SyntaxKind.ArrayLiteralExpression:\n      return node.getElements().map(parseValue)\n    case SyntaxKind.ObjectLiteralExpression:\n      return parseObjectLiteralExpression(node)\n    default:\n      return node.getText()\n  }\n}\n\nexport function buildTailwindThemeColorsFromCssVars(\n  cssVars: Record<string, string>\n) {\n  const result: Record<string, any> = {}\n\n  for (const key of Object.keys(cssVars)) {\n    const parts = key.split(\"-\")\n    const colorName = parts[0]\n    const subType = parts.slice(1).join(\"-\")\n\n    if (subType === \"\") {\n      if (typeof result[colorName] === \"object\") {\n        result[colorName].DEFAULT = `hsl(var(--${key}))`\n      } else {\n        result[colorName] = `hsl(var(--${key}))`\n      }\n    } else {\n      if (typeof result[colorName] !== \"object\") {\n        result[colorName] = { DEFAULT: `hsl(var(--${colorName}))` }\n      }\n      result[colorName][subType] = `hsl(var(--${key}))`\n    }\n  }\n\n  // Remove DEFAULT if it's not in the original cssVars\n  for (const [colorName, value] of Object.entries(result)) {\n    if (\n      typeof value === \"object\" &&\n      value.DEFAULT === `hsl(var(--${colorName}))` &&\n      !(colorName in cssVars)\n    ) {\n      delete value.DEFAULT\n    }\n  }\n\n  return result\n}\n","import path from \"path\"\nimport {\n  fetchRegistry,\n  getRegistryParentMap,\n  getRegistryTypeAliasMap,\n  registryResolveItemsTree,\n  resolveRegistryItems,\n} from \"@/src/registry/api\"\nimport { registryItemSchema } from \"@/src/registry/schema\"\nimport {\n  configSchema,\n  findCommonRoot,\n  findPackageRoot,\n  getWorkspaceConfig,\n  workspaceConfigSchema,\n  type Config,\n} from \"@/src/utils/get-config\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { logger } from \"@/src/utils/logger\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport { updateCssVars } from \"@/src/utils/updaters/update-css-vars\"\nimport { updateDependencies } from \"@/src/utils/updaters/update-dependencies\"\nimport { updateFiles } from \"@/src/utils/updaters/update-files\"\nimport { updateTailwindConfig } from \"@/src/utils/updaters/update-tailwind-config\"\nimport { z } from \"zod\"\n\nexport async function addComponents(\n  components: string[],\n  config: Config,\n  options: {\n    overwrite?: boolean\n    silent?: boolean\n    isNewProject?: boolean\n  }\n) {\n  options = {\n    overwrite: false,\n    silent: false,\n    isNewProject: false,\n    ...options,\n  }\n\n  const workspaceConfig = await getWorkspaceConfig(config)\n  if (\n    workspaceConfig &&\n    workspaceConfig?.ui.resolvedPaths.cwd !== config.resolvedPaths.cwd\n  ) {\n    return await addWorkspaceComponents(components, config, workspaceConfig, {\n      ...options,\n      isRemote:\n        components?.length === 1 && !!components[0].match(/\\/chat\\/b\\//),\n    })\n  }\n\n  return await addProjectComponents(components, config, options)\n}\n\nasync function addProjectComponents(\n  components: string[],\n  config: z.infer<typeof configSchema>,\n  options: {\n    overwrite?: boolean\n    silent?: boolean\n    isNewProject?: boolean\n  }\n) {\n  const registrySpinner = spinner(`Checking registry.`, {\n    silent: options.silent,\n  })?.start()\n  const tree = await registryResolveItemsTree(components, config)\n  if (!tree) {\n    registrySpinner?.fail()\n    return handleError(new Error(\"Failed to fetch components from registry.\"))\n  }\n  registrySpinner?.succeed()\n\n  await updateTailwindConfig(tree.tailwind?.config, config, {\n    silent: options.silent,\n  })\n  await updateCssVars(tree.cssVars, config, {\n    cleanupDefaultNextStyles: options.isNewProject,\n    silent: options.silent,\n  })\n\n  await updateDependencies(tree.dependencies, config, {\n    silent: options.silent,\n  })\n  await updateFiles(tree.files, config, {\n    overwrite: options.overwrite,\n    silent: options.silent,\n  })\n\n  if (tree.docs) {\n    logger.info(tree.docs)\n  }\n}\n\nasync function addWorkspaceComponents(\n  components: string[],\n  config: z.infer<typeof configSchema>,\n  workspaceConfig: z.infer<typeof workspaceConfigSchema>,\n  options: {\n    overwrite?: boolean\n    silent?: boolean\n    isNewProject?: boolean\n    isRemote?: boolean\n  }\n) {\n  const registrySpinner = spinner(`Checking registry.`, {\n    silent: options.silent,\n  })?.start()\n  let registryItems = await resolveRegistryItems(components, config)\n  let result = await fetchRegistry(registryItems)\n  const payload = z.array(registryItemSchema).parse(result)\n  if (!payload) {\n    registrySpinner?.fail()\n    return handleError(new Error(\"Failed to fetch components from registry.\"))\n  }\n  registrySpinner?.succeed()\n\n  const registryParentMap = getRegistryParentMap(payload)\n  const registryTypeAliasMap = getRegistryTypeAliasMap()\n\n  const filesCreated: string[] = []\n  const filesUpdated: string[] = []\n  const filesSkipped: string[] = []\n\n  const rootSpinner = spinner(`Installing components.`)?.start()\n\n  for (const component of payload) {\n    const alias = registryTypeAliasMap.get(component.type)\n    const registryParent = registryParentMap.get(component.name)\n\n    // We don't support this type of component.\n    if (!alias) {\n      continue\n    }\n\n    // A good start is ui for now.\n    // TODO: Add support for other types.\n    let targetConfig =\n      component.type === \"registry:ui\" || registryParent?.type === \"registry:ui\"\n        ? workspaceConfig.ui\n        : config\n\n    const workspaceRoot = findCommonRoot(\n      config.resolvedPaths.cwd,\n      targetConfig.resolvedPaths.ui\n    )\n    const packageRoot =\n      (await findPackageRoot(workspaceRoot, targetConfig.resolvedPaths.cwd)) ??\n      targetConfig.resolvedPaths.cwd\n\n    // 1. Update tailwind config.\n    if (component.tailwind?.config) {\n      await updateTailwindConfig(component.tailwind?.config, targetConfig, {\n        silent: true,\n      })\n      filesUpdated.push(\n        path.relative(workspaceRoot, targetConfig.resolvedPaths.tailwindConfig)\n      )\n    }\n\n    // 2. Update css vars.\n    if (component.cssVars) {\n      await updateCssVars(component.cssVars, targetConfig, {\n        silent: true,\n      })\n      filesUpdated.push(\n        path.relative(workspaceRoot, targetConfig.resolvedPaths.tailwindCss)\n      )\n    }\n\n    // 3. Update dependencies.\n    await updateDependencies(component.dependencies, targetConfig, {\n      silent: true,\n    })\n\n    // 4. Update files.\n    const files = await updateFiles(component.files, targetConfig, {\n      overwrite: options.overwrite,\n      silent: true,\n      rootSpinner,\n      isRemote: options.isRemote,\n    })\n\n    filesCreated.push(\n      ...files.filesCreated.map((file) =>\n        path.relative(workspaceRoot, path.join(packageRoot, file))\n      )\n    )\n    filesUpdated.push(\n      ...files.filesUpdated.map((file) =>\n        path.relative(workspaceRoot, path.join(packageRoot, file))\n      )\n    )\n    filesSkipped.push(\n      ...files.filesSkipped.map((file) =>\n        path.relative(workspaceRoot, path.join(packageRoot, file))\n      )\n    )\n  }\n\n  rootSpinner?.succeed()\n\n  // Sort files.\n  filesCreated.sort()\n  filesUpdated.sort()\n  filesSkipped.sort()\n\n  const hasUpdatedFiles = filesCreated.length || filesUpdated.length\n  if (!hasUpdatedFiles && !filesSkipped.length) {\n    spinner(`No files updated.`, {\n      silent: options.silent,\n    })?.info()\n  }\n\n  if (filesCreated.length) {\n    spinner(\n      `Created ${filesCreated.length} ${\n        filesCreated.length === 1 ? \"file\" : \"files\"\n      }:`,\n      {\n        silent: options.silent,\n      }\n    )?.succeed()\n    for (const file of filesCreated) {\n      logger.log(`  - ${file}`)\n    }\n  }\n\n  if (filesUpdated.length) {\n    spinner(\n      `Updated ${filesUpdated.length} ${\n        filesUpdated.length === 1 ? \"file\" : \"files\"\n      }:`,\n      {\n        silent: options.silent,\n      }\n    )?.info()\n    for (const file of filesUpdated) {\n      logger.log(`  - ${file}`)\n    }\n  }\n\n  if (filesSkipped.length) {\n    spinner(\n      `Skipped ${filesSkipped.length} ${\n        filesUpdated.length === 1 ? \"file\" : \"files\"\n      }: (use --overwrite to overwrite)`,\n      {\n        silent: options.silent,\n      }\n    )?.info()\n    for (const file of filesSkipped) {\n      logger.log(`  - ${file}`)\n    }\n  }\n}\n","import { promises as fs } from \"fs\"\nimport path from \"path\"\nimport { registryItemCssVarsSchema } from \"@/src/registry/schema\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport postcss from \"postcss\"\nimport AtRule from \"postcss/lib/at-rule\"\nimport Root from \"postcss/lib/root\"\nimport Rule from \"postcss/lib/rule\"\nimport { z } from \"zod\"\n\nexport async function updateCssVars(\n  cssVars: z.infer<typeof registryItemCssVarsSchema> | undefined,\n  config: Config,\n  options: {\n    cleanupDefaultNextStyles?: boolean\n    silent?: boolean\n  }\n) {\n  if (\n    !cssVars ||\n    !Object.keys(cssVars).length ||\n    !config.resolvedPaths.tailwindCss\n  ) {\n    return\n  }\n\n  options = {\n    cleanupDefaultNextStyles: false,\n    silent: false,\n    ...options,\n  }\n  const cssFilepath = config.resolvedPaths.tailwindCss\n  const cssFilepathRelative = path.relative(\n    config.resolvedPaths.cwd,\n    cssFilepath\n  )\n  const cssVarsSpinner = spinner(\n    `Updating ${highlighter.info(cssFilepathRelative)}`,\n    {\n      silent: options.silent,\n    }\n  ).start()\n  const raw = await fs.readFile(cssFilepath, \"utf8\")\n  let output = await transformCssVars(raw, cssVars, config, {\n    cleanupDefaultNextStyles: options.cleanupDefaultNextStyles,\n  })\n  await fs.writeFile(cssFilepath, output, \"utf8\")\n  cssVarsSpinner.succeed()\n}\n\nexport async function transformCssVars(\n  input: string,\n  cssVars: z.infer<typeof registryItemCssVarsSchema>,\n  config: Config,\n  options: {\n    cleanupDefaultNextStyles?: boolean\n  } = {\n    cleanupDefaultNextStyles: false,\n  }\n) {\n  options = {\n    cleanupDefaultNextStyles: false,\n    ...options,\n  }\n\n  const plugins = [updateCssVarsPlugin(cssVars)]\n  if (options.cleanupDefaultNextStyles) {\n    plugins.push(cleanupDefaultNextStylesPlugin())\n  }\n\n  // Only add the base layer plugin if we're using css variables.\n  if (config.tailwind.cssVariables) {\n    plugins.push(updateBaseLayerPlugin())\n  }\n\n  const result = await postcss(plugins).process(input, {\n    from: undefined,\n  })\n\n  return result.css\n}\n\nfunction updateBaseLayerPlugin() {\n  return {\n    postcssPlugin: \"update-base-layer\",\n    Once(root: Root) {\n      const requiredRules = [\n        { selector: \"*\", apply: \"border-border\" },\n        { selector: \"body\", apply: \"bg-background text-foreground\" },\n      ]\n\n      let baseLayer = root.nodes.find(\n        (node): node is AtRule =>\n          node.type === \"atrule\" &&\n          node.name === \"layer\" &&\n          node.params === \"base\" &&\n          requiredRules.every(({ selector, apply }) =>\n            node.nodes?.some(\n              (rule): rule is Rule =>\n                rule.type === \"rule\" &&\n                rule.selector === selector &&\n                rule.nodes.some(\n                  (applyRule): applyRule is AtRule =>\n                    applyRule.type === \"atrule\" &&\n                    applyRule.name === \"apply\" &&\n                    applyRule.params === apply\n                )\n            )\n          )\n      ) as AtRule | undefined\n\n      if (!baseLayer) {\n        baseLayer = postcss.atRule({\n          name: \"layer\",\n          params: \"base\",\n          raws: { semicolon: true, between: \" \", before: \"\\n\" },\n        })\n        root.append(baseLayer)\n      }\n\n      requiredRules.forEach(({ selector, apply }) => {\n        const existingRule = baseLayer?.nodes?.find(\n          (node): node is Rule =>\n            node.type === \"rule\" && node.selector === selector\n        )\n\n        if (!existingRule) {\n          baseLayer?.append(\n            postcss.rule({\n              selector,\n              nodes: [\n                postcss.atRule({\n                  name: \"apply\",\n                  params: apply,\n                  raws: { semicolon: true, before: \"\\n    \" },\n                }),\n              ],\n              raws: { semicolon: true, between: \" \", before: \"\\n  \" },\n            })\n          )\n        }\n      })\n    },\n  }\n}\n\nfunction updateCssVarsPlugin(\n  cssVars: z.infer<typeof registryItemCssVarsSchema>\n) {\n  return {\n    postcssPlugin: \"update-css-vars\",\n    Once(root: Root) {\n      let baseLayer = root.nodes.find(\n        (node) =>\n          node.type === \"atrule\" &&\n          node.name === \"layer\" &&\n          node.params === \"base\"\n      ) as AtRule | undefined\n\n      if (!(baseLayer instanceof AtRule)) {\n        baseLayer = postcss.atRule({\n          name: \"layer\",\n          params: \"base\",\n          nodes: [],\n          raws: {\n            semicolon: true,\n            before: \"\\n\",\n            between: \" \",\n          },\n        })\n        root.append(baseLayer)\n      }\n\n      if (baseLayer !== undefined) {\n        // Add variables for each key in cssVars\n        Object.entries(cssVars).forEach(([key, vars]) => {\n          const selector = key === \"light\" ? \":root\" : `.${key}`\n          // TODO: Fix typecheck.\n          addOrUpdateVars(baseLayer as AtRule, selector, vars)\n        })\n      }\n    },\n  }\n}\n\nfunction removeConflictVars(root: Rule | Root) {\n  const rootRule = root.nodes.find(\n    (node): node is Rule => node.type === \"rule\" && node.selector === \":root\"\n  )\n\n  if (rootRule) {\n    const propsToRemove = [\"--background\", \"--foreground\"]\n\n    rootRule.nodes\n      .filter(\n        (node): node is postcss.Declaration =>\n          node.type === \"decl\" && propsToRemove.includes(node.prop)\n      )\n      .forEach((node) => node.remove())\n\n    if (rootRule.nodes.length === 0) {\n      rootRule.remove()\n    }\n  }\n}\n\nfunction cleanupDefaultNextStylesPlugin() {\n  return {\n    postcssPlugin: \"cleanup-default-next-styles\",\n    Once(root: Root) {\n      const bodyRule = root.nodes.find(\n        (node): node is Rule => node.type === \"rule\" && node.selector === \"body\"\n      )\n      if (bodyRule) {\n        // Remove color from the body node.\n        bodyRule.nodes\n          .find(\n            (node): node is postcss.Declaration =>\n              node.type === \"decl\" &&\n              node.prop === \"color\" &&\n              [\"rgb(var(--foreground-rgb))\", \"var(--foreground)\"].includes(\n                node.value\n              )\n          )\n          ?.remove()\n\n        // Remove background: linear-gradient.\n        bodyRule.nodes\n          .find((node): node is postcss.Declaration => {\n            return (\n              node.type === \"decl\" &&\n              node.prop === \"background\" &&\n              // This is only going to run on create project, so all good.\n              (node.value.startsWith(\"linear-gradient\") ||\n                node.value === \"var(--background)\")\n            )\n          })\n          ?.remove()\n\n        // If the body rule is empty, remove it.\n        if (bodyRule.nodes.length === 0) {\n          bodyRule.remove()\n        }\n      }\n\n      removeConflictVars(root)\n\n      const darkRootRule = root.nodes.find(\n        (node): node is Rule =>\n          node.type === \"atrule\" &&\n          node.params === \"(prefers-color-scheme: dark)\"\n      )\n\n      if (darkRootRule) {\n        removeConflictVars(darkRootRule)\n        if (darkRootRule.nodes.length === 0) {\n          darkRootRule.remove()\n        }\n      }\n    },\n  }\n}\n\nfunction addOrUpdateVars(\n  baseLayer: AtRule,\n  selector: string,\n  vars: Record<string, string>\n) {\n  let ruleNode = baseLayer.nodes?.find(\n    (node): node is Rule => node.type === \"rule\" && node.selector === selector\n  )\n\n  if (!ruleNode) {\n    if (Object.keys(vars).length > 0) {\n      ruleNode = postcss.rule({\n        selector,\n        raws: { between: \" \", before: \"\\n  \" },\n      })\n      baseLayer.append(ruleNode)\n    }\n  }\n\n  Object.entries(vars).forEach(([key, value]) => {\n    const prop = `--${key.replace(/^--/, \"\")}`\n    const newDecl = postcss.decl({\n      prop,\n      value,\n      raws: { semicolon: true },\n    })\n\n    const existingDecl = ruleNode?.nodes.find(\n      (node): node is postcss.Declaration =>\n        node.type === \"decl\" && node.prop === prop\n    )\n\n    existingDecl ? existingDecl.replaceWith(newDecl) : ruleNode?.append(newDecl)\n  })\n}\n","import { detect } from \"@antfu/ni\"\n\nexport async function getPackageManager(\n  targetDir: string,\n  { withFallback }: { withFallback?: boolean } = {\n    withFallback: false,\n  }\n): Promise<\"yarn\" | \"pnpm\" | \"bun\" | \"npm\"> {\n  const packageManager = await detect({ programmatic: true, cwd: targetDir })\n\n  if (packageManager === \"yarn@berry\") return \"yarn\"\n  if (packageManager === \"pnpm@6\") return \"pnpm\"\n  if (packageManager === \"bun\") return \"bun\"\n\n  if (!withFallback) {\n    return packageManager ?? \"npm\"\n  }\n\n  // Fallback to user agent if not detected.\n  const userAgent = process.env.npm_config_user_agent || \"\"\n\n  if (userAgent.startsWith(\"yarn\")) {\n    return \"yarn\"\n  }\n\n  if (userAgent.startsWith(\"pnpm\")) {\n    return \"pnpm\"\n  }\n\n  if (userAgent.startsWith(\"bun\")) {\n    return \"bun\"\n  }\n\n  return \"npm\"\n}\n\nexport async function getPackageRunner(cwd: string) {\n  const packageManager = await getPackageManager(cwd)\n\n  if (packageManager === \"pnpm\") return \"pnpm dlx\"\n\n  if (packageManager === \"bun\") return \"bunx\"\n\n  return \"npx\"\n}\n","import { RegistryItem } from \"@/src/registry/schema\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { getPackageInfo } from \"@/src/utils/get-package-info\"\nimport { getPackageManager } from \"@/src/utils/get-package-manager\"\nimport { logger } from \"@/src/utils/logger\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport { execa } from \"execa\"\nimport prompts from \"prompts\"\n\nexport async function updateDependencies(\n  dependencies: RegistryItem[\"dependencies\"],\n  config: Config,\n  options: {\n    silent?: boolean\n  }\n) {\n  dependencies = Array.from(new Set(dependencies))\n  if (!dependencies?.length) {\n    return\n  }\n\n  options = {\n    silent: false,\n    ...options,\n  }\n\n  const dependenciesSpinner = spinner(`Installing dependencies.`, {\n    silent: options.silent,\n  })?.start()\n  const packageManager = await getPackageManager(config.resolvedPaths.cwd)\n\n  // Offer to use --force or --legacy-peer-deps if using React 19 with npm.\n  let flag = \"\"\n  if (isUsingReact19(config) && packageManager === \"npm\") {\n    dependenciesSpinner.stopAndPersist()\n    logger.warn(\n      \"\\nIt looks like you are using React 19. \\nSome packages may fail to install due to peer dependency issues in npm (see https://ui.shadcn.com/react-19).\\n\"\n    )\n    const confirmation = await prompts([\n      {\n        type: \"select\",\n        name: \"flag\",\n        message: \"How would you like to proceed?\",\n        choices: [\n          { title: \"Use --force\", value: \"force\" },\n          { title: \"Use --legacy-peer-deps\", value: \"legacy-peer-deps\" },\n        ],\n      },\n    ])\n\n    if (confirmation) {\n      flag = confirmation.flag\n    }\n  }\n\n  dependenciesSpinner?.start()\n\n  await execa(\n    packageManager,\n    [\n      packageManager === \"npm\" ? \"install\" : \"add\",\n      ...(packageManager === \"npm\" && flag ? [`--${flag}`] : []),\n      ...dependencies,\n    ],\n    {\n      cwd: config.resolvedPaths.cwd,\n    }\n  )\n\n  dependenciesSpinner?.succeed()\n}\n\nfunction isUsingReact19(config: Config) {\n  const packageInfo = getPackageInfo(config.resolvedPaths.cwd)\n\n  if (!packageInfo?.dependencies?.react) {\n    return false\n  }\n\n  return /^(?:\\^|~)?19(?:\\.\\d+)*(?:-.*)?$/.test(packageInfo.dependencies.react)\n}\n","import { existsSync, promises as fs } from \"fs\"\nimport path, { basename } from \"path\"\nimport { getRegistryBaseColor } from \"@/src/registry/api\"\nimport { RegistryItem, registryItemFileSchema } from \"@/src/registry/schema\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { getProjectInfo } from \"@/src/utils/get-project-info\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport { transform } from \"@/src/utils/transformers\"\nimport { transformCssVars } from \"@/src/utils/transformers/transform-css-vars\"\nimport { transformIcons } from \"@/src/utils/transformers/transform-icons\"\nimport { transformImport } from \"@/src/utils/transformers/transform-import\"\nimport { transformRsc } from \"@/src/utils/transformers/transform-rsc\"\nimport { transformTwPrefixes } from \"@/src/utils/transformers/transform-tw-prefix\"\nimport prompts from \"prompts\"\nimport { z } from \"zod\"\n\nexport async function updateFiles(\n  files: RegistryItem[\"files\"],\n  config: Config,\n  options: {\n    overwrite?: boolean\n    force?: boolean\n    silent?: boolean\n    rootSpinner?: ReturnType<typeof spinner>\n    isRemote?: boolean\n  }\n) {\n  if (!files?.length) {\n    return {\n      filesCreated: [],\n      filesUpdated: [],\n      filesSkipped: [],\n    }\n  }\n  options = {\n    overwrite: false,\n    force: false,\n    silent: false,\n    isRemote: false,\n    ...options,\n  }\n  const filesCreatedSpinner = spinner(`Updating files.`, {\n    silent: options.silent,\n  })?.start()\n\n  const [projectInfo, baseColor] = await Promise.all([\n    getProjectInfo(config.resolvedPaths.cwd),\n    getRegistryBaseColor(config.tailwind.baseColor),\n  ])\n\n  const filesCreated = []\n  const filesUpdated = []\n  const filesSkipped = []\n\n  for (const file of files) {\n    if (!file.content) {\n      continue\n    }\n\n    let filePath = resolveFilePath(file, config, {\n      isSrcDir: projectInfo?.isSrcDir,\n      commonRoot: findCommonRoot(\n        files.map((f) => f.path),\n        file.path\n      ),\n    })\n    const fileName = basename(file.path)\n    const targetDir = path.dirname(filePath)\n\n    if (!config.tsx) {\n      filePath = filePath.replace(/\\.tsx?$/, (match) =>\n        match === \".tsx\" ? \".jsx\" : \".js\"\n      )\n    }\n\n    const existingFile = existsSync(filePath)\n\n    if (existingFile && !options.overwrite) {\n      filesCreatedSpinner.stop()\n      if (options.rootSpinner) {\n        options.rootSpinner.stop()\n      }\n      const { overwrite } = await prompts({\n        type: \"confirm\",\n        name: \"overwrite\",\n        message: `The file ${highlighter.info(\n          fileName\n        )} already exists. Would you like to overwrite?`,\n        initial: false,\n      })\n\n      if (!overwrite) {\n        filesSkipped.push(path.relative(config.resolvedPaths.cwd, filePath))\n        if (options.rootSpinner) {\n          options.rootSpinner.start()\n        }\n        continue\n      }\n      filesCreatedSpinner?.start()\n      if (options.rootSpinner) {\n        options.rootSpinner.start()\n      }\n    }\n\n    // Create the target directory if it doesn't exist.\n    if (!existsSync(targetDir)) {\n      await fs.mkdir(targetDir, { recursive: true })\n    }\n\n    // Run our transformers.\n    const content = await transform(\n      {\n        filename: file.path,\n        raw: file.content,\n        config,\n        baseColor,\n        transformJsx: !config.tsx,\n        isRemote: options.isRemote,\n      },\n      [\n        transformImport,\n        transformRsc,\n        transformCssVars,\n        transformTwPrefixes,\n        transformIcons,\n      ]\n    )\n\n    await fs.writeFile(filePath, content, \"utf-8\")\n    existingFile\n      ? filesUpdated.push(path.relative(config.resolvedPaths.cwd, filePath))\n      : filesCreated.push(path.relative(config.resolvedPaths.cwd, filePath))\n  }\n\n  const hasUpdatedFiles = filesCreated.length || filesUpdated.length\n  if (!hasUpdatedFiles && !filesSkipped.length) {\n    filesCreatedSpinner?.info(\"No files updated.\")\n  }\n\n  if (filesCreated.length) {\n    filesCreatedSpinner?.succeed(\n      `Created ${filesCreated.length} ${\n        filesCreated.length === 1 ? \"file\" : \"files\"\n      }:`\n    )\n    if (!options.silent) {\n      for (const file of filesCreated) {\n        logger.log(`  - ${file}`)\n      }\n    }\n  } else {\n    filesCreatedSpinner?.stop()\n  }\n\n  if (filesUpdated.length) {\n    spinner(\n      `Updated ${filesUpdated.length} ${\n        filesUpdated.length === 1 ? \"file\" : \"files\"\n      }:`,\n      {\n        silent: options.silent,\n      }\n    )?.info()\n    if (!options.silent) {\n      for (const file of filesUpdated) {\n        logger.log(`  - ${file}`)\n      }\n    }\n  }\n\n  if (filesSkipped.length) {\n    spinner(\n      `Skipped ${filesSkipped.length} ${\n        filesUpdated.length === 1 ? \"file\" : \"files\"\n      }: (use --overwrite to overwrite)`,\n      {\n        silent: options.silent,\n      }\n    )?.info()\n    if (!options.silent) {\n      for (const file of filesSkipped) {\n        logger.log(`  - ${file}`)\n      }\n    }\n  }\n\n  if (!options.silent) {\n    logger.break()\n  }\n\n  return {\n    filesCreated,\n    filesUpdated,\n    filesSkipped,\n  }\n}\n\nexport function resolveFilePath(\n  file: z.infer<typeof registryItemFileSchema>,\n  config: Config,\n  options: {\n    isSrcDir?: boolean\n    commonRoot?: string\n  }\n) {\n  if (file.target) {\n    if (file.target.startsWith(\"~/\")) {\n      return path.join(config.resolvedPaths.cwd, file.target.replace(\"~/\", \"\"))\n    }\n\n    return options.isSrcDir\n      ? path.join(\n          config.resolvedPaths.cwd,\n          \"src\",\n          file.target.replace(\"src/\", \"\")\n        )\n      : path.join(config.resolvedPaths.cwd, file.target.replace(\"src/\", \"\"))\n  }\n\n  const targetDir = resolveFileTargetDirectory(file, config)\n\n  const relativePath = resolveNestedFilePath(file.path, targetDir)\n  return path.join(targetDir, relativePath)\n}\n\nfunction resolveFileTargetDirectory(\n  file: z.infer<typeof registryItemFileSchema>,\n  config: Config\n) {\n  if (file.type === \"registry:ui\") {\n    return config.resolvedPaths.ui\n  }\n\n  if (file.type === \"registry:lib\") {\n    return config.resolvedPaths.lib\n  }\n\n  if (file.type === \"registry:block\" || file.type === \"registry:component\") {\n    return config.resolvedPaths.components\n  }\n\n  if (file.type === \"registry:hook\") {\n    return config.resolvedPaths.hooks\n  }\n\n  return config.resolvedPaths.components\n}\n\nexport function findCommonRoot(paths: string[], needle: string): string {\n  // Remove leading slashes for consistent handling\n  const normalizedPaths = paths.map((p) => p.replace(/^\\//, \"\"))\n  const normalizedNeedle = needle.replace(/^\\//, \"\")\n\n  // Get the directory path of the needle by removing the file name\n  const needleDir = normalizedNeedle.split(\"/\").slice(0, -1).join(\"/\")\n\n  // If needle is at root level, return empty string\n  if (!needleDir) {\n    return \"\"\n  }\n\n  // Split the needle directory into segments\n  const needleSegments = needleDir.split(\"/\")\n\n  // Start from the full path and work backwards\n  for (let i = needleSegments.length; i > 0; i--) {\n    const testPath = needleSegments.slice(0, i).join(\"/\")\n    // Check if this is a common root by verifying if any other paths start with it\n    const hasRelatedPaths = normalizedPaths.some(\n      (path) => path !== normalizedNeedle && path.startsWith(testPath + \"/\")\n    )\n    if (hasRelatedPaths) {\n      return \"/\" + testPath // Add leading slash back for the result\n    }\n  }\n\n  // If no common root found with other files, return the parent directory of the needle\n  return \"/\" + needleDir // Add leading slash back for the result\n}\n\nexport function resolveNestedFilePath(\n  filePath: string,\n  targetDir: string\n): string {\n  // Normalize paths by removing leading/trailing slashes\n  const normalizedFilePath = filePath.replace(/^\\/|\\/$/g, \"\")\n  const normalizedTargetDir = targetDir.replace(/^\\/|\\/$/g, \"\")\n\n  // Split paths into segments\n  const fileSegments = normalizedFilePath.split(\"/\")\n  const targetSegments = normalizedTargetDir.split(\"/\")\n\n  // Find the last matching segment from targetDir in filePath\n  const lastTargetSegment = targetSegments[targetSegments.length - 1]\n  const commonDirIndex = fileSegments.findIndex(\n    (segment) => segment === lastTargetSegment\n  )\n\n  if (commonDirIndex === -1) {\n    // Return just the filename if no common directory is found\n    return fileSegments[fileSegments.length - 1]\n  }\n\n  // Return everything after the common directory\n  return fileSegments.slice(commonDirIndex + 1).join(\"/\")\n}\n","import { promises as fs } from \"fs\"\nimport { tmpdir } from \"os\"\nimport path from \"path\"\nimport { registryBaseColorSchema } from \"@/src/registry/schema\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { transformCssVars } from \"@/src/utils/transformers/transform-css-vars\"\nimport { transformIcons } from \"@/src/utils/transformers/transform-icons\"\nimport { transformImport } from \"@/src/utils/transformers/transform-import\"\nimport { transformJsx } from \"@/src/utils/transformers/transform-jsx\"\nimport { transformRsc } from \"@/src/utils/transformers/transform-rsc\"\nimport { Project, ScriptKind, type SourceFile } from \"ts-morph\"\nimport { z } from \"zod\"\n\nimport { transformTwPrefixes } from \"./transform-tw-prefix\"\n\nexport type TransformOpts = {\n  filename: string\n  raw: string\n  config: Config\n  baseColor?: z.infer<typeof registryBaseColorSchema>\n  transformJsx?: boolean\n  isRemote?: boolean\n}\n\nexport type Transformer<Output = SourceFile> = (\n  opts: TransformOpts & {\n    sourceFile: SourceFile\n  }\n) => Promise<Output>\n\nconst project = new Project({\n  compilerOptions: {},\n})\n\nasync function createTempSourceFile(filename: string) {\n  const dir = await fs.mkdtemp(path.join(tmpdir(), \"shadcn-\"))\n  return path.join(dir, filename)\n}\n\nexport async function transform(\n  opts: TransformOpts,\n  transformers: Transformer[] = [\n    transformImport,\n    transformRsc,\n    transformCssVars,\n    transformTwPrefixes,\n    transformIcons,\n  ]\n) {\n  const tempFile = await createTempSourceFile(opts.filename)\n  const sourceFile = project.createSourceFile(tempFile, opts.raw, {\n    scriptKind: ScriptKind.TSX,\n  })\n\n  for (const transformer of transformers) {\n    await transformer({ sourceFile, ...opts })\n  }\n\n  if (opts.transformJsx) {\n    return await transformJsx({\n      sourceFile,\n      ...opts,\n    })\n  }\n\n  return sourceFile.getText()\n}\n","import { registryBaseColorSchema } from \"@/src/registry/schema\"\nimport { Transformer } from \"@/src/utils/transformers\"\nimport { ScriptKind, SyntaxKind } from \"ts-morph\"\nimport { z } from \"zod\"\n\nexport const transformCssVars: Transformer = async ({\n  sourceFile,\n  config,\n  baseColor,\n}) => {\n  // No transform if using css variables.\n  if (config.tailwind?.cssVariables || !baseColor?.inlineColors) {\n    return sourceFile\n  }\n\n  // Find jsx attributes with the name className.\n  // const openingElements = sourceFile.getDescendantsOfKind(SyntaxKind.JsxElement)\n  // console.log(openingElements)\n  // const jsxAttributes = sourceFile\n  //   .getDescendantsOfKind(SyntaxKind.JsxAttribute)\n  //   .filter((node) => node.getName() === \"className\")\n\n  // for (const jsxAttribute of jsxAttributes) {\n  //   const value = jsxAttribute.getInitializer()?.getText()\n  //   if (value) {\n  //     const valueWithColorMapping = applyColorMapping(\n  //       value.replace(/\"/g, \"\"),\n  //       baseColor.inlineColors\n  //     )\n  //     jsxAttribute.setInitializer(`\"${valueWithColorMapping}\"`)\n  //   }\n  // }\n  sourceFile.getDescendantsOfKind(SyntaxKind.StringLiteral).forEach((node) => {\n    const value = node.getText()\n    if (value) {\n      const valueWithColorMapping = applyColorMapping(\n        value.replace(/\"/g, \"\"),\n        baseColor.inlineColors\n      )\n      node.replaceWithText(`\"${valueWithColorMapping.trim()}\"`)\n    }\n  })\n\n  return sourceFile\n}\n\n// export default function transformer(file: FileInfo, api: API) {\n//   const j = api.jscodeshift.withParser(\"tsx\")\n\n//   // Replace bg-background with \"bg-white dark:bg-slate-950\"\n//   const $j = j(file.source)\n//   return $j\n//     .find(j.JSXAttribute, {\n//       name: {\n//         name: \"className\",\n//       },\n//     })\n//     .forEach((path) => {\n//       const { node } = path\n//       if (node?.value?.type) {\n//         if (node.value.type === \"StringLiteral\") {\n//           node.value.value = applyColorMapping(node.value.value)\n//           console.log(node.value.value)\n//         }\n\n//         if (\n//           node.value.type === \"JSXExpressionContainer\" &&\n//           node.value.expression.type === \"CallExpression\"\n//         ) {\n//           const callee = node.value.expression.callee\n//           if (callee.type === \"Identifier\" && callee.name === \"cn\") {\n//             node.value.expression.arguments.forEach((arg) => {\n//               if (arg.type === \"StringLiteral\") {\n//                 arg.value = applyColorMapping(arg.value)\n//               }\n\n//               if (\n//                 arg.type === \"LogicalExpression\" &&\n//                 arg.right.type === \"StringLiteral\"\n//               ) {\n//                 arg.right.value = applyColorMapping(arg.right.value)\n//               }\n//             })\n//           }\n//         }\n//       }\n//     })\n//     .toSource()\n// }\n\n// // export function splitClassName(input: string): (string | null)[] {\n// //   const parts = input.split(\":\")\n// //   const classNames = parts.map((part) => {\n// //     const match = part.match(/^\\[?(.+)\\]$/)\n// //     if (match) {\n// //       return match[1]\n// //     } else {\n// //       return null\n// //     }\n// //   })\n\n// //   return classNames\n// // }\n\n// Splits a className into variant-name-alpha.\n// eg. hover:bg-primary-100 -> [hover, bg-primary, 100]\nexport function splitClassName(className: string): (string | null)[] {\n  if (!className.includes(\"/\") && !className.includes(\":\")) {\n    return [null, className, null]\n  }\n\n  const parts: (string | null)[] = []\n  // First we split to find the alpha.\n  let [rest, alpha] = className.split(\"/\")\n\n  // Check if rest has a colon.\n  if (!rest.includes(\":\")) {\n    return [null, rest, alpha]\n  }\n\n  // Next we split the rest by the colon.\n  const split = rest.split(\":\")\n\n  // We take the last item from the split as the name.\n  const name = split.pop()\n\n  // We glue back the rest of the split.\n  const variant = split.join(\":\")\n\n  // Finally we push the variant, name and alpha.\n  parts.push(variant ?? null, name ?? null, alpha ?? null)\n\n  return parts\n}\n\nconst PREFIXES = [\"bg-\", \"text-\", \"border-\", \"ring-offset-\", \"ring-\"]\n\nexport function applyColorMapping(\n  input: string,\n  mapping: z.infer<typeof registryBaseColorSchema>[\"inlineColors\"]\n) {\n  // Handle border classes.\n  if (input.includes(\" border \")) {\n    input = input.replace(\" border \", \" border border-border \")\n  }\n\n  // Build color mappings.\n  const classNames = input.split(\" \")\n  const lightMode = new Set<string>()\n  const darkMode = new Set<string>()\n  for (let className of classNames) {\n    const [variant, value, modifier] = splitClassName(className)\n    const prefix = PREFIXES.find((prefix) => value?.startsWith(prefix))\n    if (!prefix) {\n      if (!lightMode.has(className)) {\n        lightMode.add(className)\n      }\n      continue\n    }\n\n    const needle = value?.replace(prefix, \"\")\n    if (needle && needle in mapping.light) {\n      lightMode.add(\n        [variant, `${prefix}${mapping.light[needle]}`]\n          .filter(Boolean)\n          .join(\":\") + (modifier ? `/${modifier}` : \"\")\n      )\n\n      darkMode.add(\n        [\"dark\", variant, `${prefix}${mapping.dark[needle]}`]\n          .filter(Boolean)\n          .join(\":\") + (modifier ? `/${modifier}` : \"\")\n      )\n      continue\n    }\n\n    if (!lightMode.has(className)) {\n      lightMode.add(className)\n    }\n  }\n\n  return [...Array.from(lightMode), ...Array.from(darkMode)].join(\" \").trim()\n}\n","export const ICON_LIBRARIES = {\n  lucide: {\n    name: \"lucide-react\",\n    package: \"lucide-react\",\n    import: \"lucide-react\",\n  },\n  radix: {\n    name: \"@radix-ui/react-icons\",\n    package: \"@radix-ui/react-icons\",\n    import: \"@radix-ui/react-icons\",\n  },\n}\n","import { getRegistryIcons } from \"@/src/registry/api\"\nimport { ICON_LIBRARIES } from \"@/src/utils/icon-libraries\"\nimport { Transformer } from \"@/src/utils/transformers\"\nimport { SourceFile, SyntaxKind } from \"ts-morph\"\n\n// Lucide is the default icon library in the registry.\nconst SOURCE_LIBRARY = \"lucide\"\n\nexport const transformIcons: Transformer = async ({ sourceFile, config }) => {\n  // No transform if we cannot read the icon library.\n  if (!config.iconLibrary || !(config.iconLibrary in ICON_LIBRARIES)) {\n    return sourceFile\n  }\n\n  const registryIcons = await getRegistryIcons()\n  const sourceLibrary = SOURCE_LIBRARY\n  const targetLibrary = config.iconLibrary\n\n  if (sourceLibrary === targetLibrary) {\n    return sourceFile\n  }\n\n  let targetedIcons: string[] = []\n  for (const importDeclaration of sourceFile.getImportDeclarations() ?? []) {\n    if (\n      importDeclaration.getModuleSpecifier()?.getText() !==\n      `\"${ICON_LIBRARIES[SOURCE_LIBRARY].import}\"`\n    ) {\n      continue\n    }\n\n    for (const specifier of importDeclaration.getNamedImports() ?? []) {\n      const iconName = specifier.getName()\n\n      const targetedIcon = registryIcons[iconName]?.[targetLibrary]\n\n      if (!targetedIcon || targetedIcons.includes(targetedIcon)) {\n        continue\n      }\n\n      targetedIcons.push(targetedIcon)\n\n      // Remove the named import.\n      specifier.remove()\n\n      // Replace with the targeted icon.\n      sourceFile\n        .getDescendantsOfKind(SyntaxKind.JsxSelfClosingElement)\n        .filter((node) => node.getTagNameNode()?.getText() === iconName)\n        .forEach((node) => node.getTagNameNode()?.replaceWithText(targetedIcon))\n    }\n\n    // If the named import is empty, remove the import declaration.\n    if (importDeclaration.getNamedImports()?.length === 0) {\n      importDeclaration.remove()\n    }\n  }\n\n  if (targetedIcons.length > 0) {\n    const iconImportDeclaration = sourceFile.addImportDeclaration({\n      moduleSpecifier:\n        ICON_LIBRARIES[targetLibrary as keyof typeof ICON_LIBRARIES]?.import,\n      namedImports: targetedIcons.map((icon) => ({\n        name: icon,\n      })),\n    })\n\n    if (!_useSemicolon(sourceFile)) {\n      iconImportDeclaration.replaceWithText(\n        iconImportDeclaration.getText().replace(\";\", \"\")\n      )\n    }\n  }\n\n  return sourceFile\n}\n\nfunction _useSemicolon(sourceFile: SourceFile) {\n  return (\n    sourceFile.getImportDeclarations()?.[0]?.getText().endsWith(\";\") ?? false\n  )\n}\n","import { Config } from \"@/src/utils/get-config\"\nimport { Transformer } from \"@/src/utils/transformers\"\n\nconst COMMON_CN_IMPORTS = {\n  \"@/lib/utils\": /^@\\/lib\\/utils/,\n  \"@workspace/lib/utils\": /^@workspace\\/lib\\/utils/,\n}\n\nexport const transformImport: Transformer = async ({\n  sourceFile,\n  config,\n  isRemote,\n}) => {\n  const importDeclarations = sourceFile.getImportDeclarations()\n\n  for (const importDeclaration of importDeclarations) {\n    const moduleSpecifier = updateImportAliases(\n      importDeclaration.getModuleSpecifierValue(),\n      config,\n      isRemote\n    )\n\n    importDeclaration.setModuleSpecifier(moduleSpecifier)\n\n    // Replace `import { cn } from \"@/lib/utils\"`\n    if (COMMON_CN_IMPORTS[moduleSpecifier as keyof typeof COMMON_CN_IMPORTS]) {\n      const namedImports = importDeclaration.getNamedImports()\n      const cnImport = namedImports.find((i) => i.getName() === \"cn\")\n      if (cnImport) {\n        importDeclaration.setModuleSpecifier(\n          moduleSpecifier.replace(\n            COMMON_CN_IMPORTS[\n              moduleSpecifier as keyof typeof COMMON_CN_IMPORTS\n            ],\n            config.aliases.utils\n          )\n        )\n      }\n    }\n  }\n\n  return sourceFile\n}\n\nfunction updateImportAliases(\n  moduleSpecifier: string,\n  config: Config,\n  isRemote: boolean = false\n) {\n  // Not a local import.\n  if (!moduleSpecifier.startsWith(\"@/\") && !isRemote) {\n    return moduleSpecifier\n  }\n\n  // This treats the remote as coming from a faux registry.\n  if (isRemote && moduleSpecifier.startsWith(\"@/\")) {\n    moduleSpecifier = moduleSpecifier.replace(/^@\\//, `@/registry/new-york/`)\n  }\n\n  // Not a registry import.\n  if (!moduleSpecifier.startsWith(\"@/registry/\")) {\n    // We fix the alias and return.\n    const alias = config.aliases.components.split(\"/\")[0]\n    return moduleSpecifier.replace(/^@\\//, `${alias}/`)\n  }\n\n  if (moduleSpecifier.match(/^@\\/registry\\/(.+)\\/ui/)) {\n    return moduleSpecifier.replace(\n      /^@\\/registry\\/(.+)\\/ui/,\n      config.aliases.ui ?? `${config.aliases.components}/ui`\n    )\n  }\n\n  if (\n    config.aliases.components &&\n    moduleSpecifier.match(/^@\\/registry\\/(.+)\\/components/)\n  ) {\n    return moduleSpecifier.replace(\n      /^@\\/registry\\/(.+)\\/components/,\n      config.aliases.components\n    )\n  }\n\n  if (config.aliases.lib && moduleSpecifier.match(/^@\\/registry\\/(.+)\\/lib/)) {\n    return moduleSpecifier.replace(\n      /^@\\/registry\\/(.+)\\/lib/,\n      config.aliases.lib\n    )\n  }\n\n  if (\n    config.aliases.hooks &&\n    moduleSpecifier.match(/^@\\/registry\\/(.+)\\/hooks/)\n  ) {\n    return moduleSpecifier.replace(\n      /^@\\/registry\\/(.+)\\/hooks/,\n      config.aliases.hooks\n    )\n  }\n\n  return moduleSpecifier.replace(\n    /^@\\/registry\\/[^/]+/,\n    config.aliases.components\n  )\n}\n","import { type Transformer } from \"@/src/utils/transformers\"\nimport { transformFromAstSync } from \"@babel/core\"\nimport { ParserOptions, parse } from \"@babel/parser\"\n// @ts-ignore\nimport transformTypescript from \"@babel/plugin-transform-typescript\"\nimport * as recast from \"recast\"\n\n// TODO.\n// I'm using recast for the AST here.\n// Figure out if ts-morph AST is compatible with Babel.\n\n// This is a copy of the babel options from recast/parser.\n// The goal here is to tolerate as much syntax as possible.\n// We want to be able to parse any valid tsx code.\n// See https://github.com/benjamn/recast/blob/master/parsers/_babel_options.ts.\nconst PARSE_OPTIONS: ParserOptions = {\n  sourceType: \"module\",\n  allowImportExportEverywhere: true,\n  allowReturnOutsideFunction: true,\n  startLine: 1,\n  tokens: true,\n  plugins: [\n    \"asyncGenerators\",\n    \"bigInt\",\n    \"classPrivateMethods\",\n    \"classPrivateProperties\",\n    \"classProperties\",\n    \"classStaticBlock\",\n    \"decimal\",\n    \"decorators-legacy\",\n    \"doExpressions\",\n    \"dynamicImport\",\n    \"exportDefaultFrom\",\n    \"exportNamespaceFrom\",\n    \"functionBind\",\n    \"functionSent\",\n    \"importAssertions\",\n    \"importMeta\",\n    \"nullishCoalescingOperator\",\n    \"numericSeparator\",\n    \"objectRestSpread\",\n    \"optionalCatchBinding\",\n    \"optionalChaining\",\n    [\n      \"pipelineOperator\",\n      {\n        proposal: \"minimal\",\n      },\n    ],\n    [\n      \"recordAndTuple\",\n      {\n        syntaxType: \"hash\",\n      },\n    ],\n    \"throwExpressions\",\n    \"topLevelAwait\",\n    \"v8intrinsic\",\n    \"typescript\",\n    \"jsx\",\n  ],\n}\n\nexport const transformJsx: Transformer<string> = async ({\n  sourceFile,\n  config,\n}) => {\n  const output = sourceFile.getFullText()\n\n  if (config.tsx) {\n    return output\n  }\n\n  const ast = recast.parse(output, {\n    parser: {\n      parse: (code: string) => {\n        return parse(code, PARSE_OPTIONS)\n      },\n    },\n  })\n\n  const result = transformFromAstSync(ast, output, {\n    cloneInputAst: false,\n    code: false,\n    ast: true,\n    plugins: [transformTypescript],\n    configFile: false,\n  })\n\n  if (!result || !result.ast) {\n    throw new Error(\"Failed to transform JSX\")\n  }\n\n  return recast.print(result.ast).code\n}\n","import { Transformer } from \"@/src/utils/transformers\"\nimport { SyntaxKind } from \"ts-morph\"\n\nconst directiveRegex = /^[\"']use client[\"']$/g\n\nexport const transformRsc: Transformer = async ({ sourceFile, config }) => {\n  if (config.rsc) {\n    return sourceFile\n  }\n\n  // Remove \"use client\" from the top of the file.\n  const first = sourceFile.getFirstChildByKind(SyntaxKind.ExpressionStatement)\n  if (first && directiveRegex.test(first.getText())) {\n    first.remove()\n  }\n\n  return sourceFile\n}\n","import { Transformer } from \"@/src/utils/transformers\"\nimport { SyntaxKind } from \"ts-morph\"\n\nimport { splitClassName } from \"./transform-css-vars\"\n\nexport const transformTwPrefixes: Transformer = async ({\n  sourceFile,\n  config,\n}) => {\n  if (!config.tailwind?.prefix) {\n    return sourceFile\n  }\n\n  // Find the cva function calls.\n  sourceFile\n    .getDescendantsOfKind(SyntaxKind.CallExpression)\n    .filter((node) => node.getExpression().getText() === \"cva\")\n    .forEach((node) => {\n      // cva(base, ...)\n      if (node.getArguments()[0]?.isKind(SyntaxKind.StringLiteral)) {\n        const defaultClassNames = node.getArguments()[0]\n        if (defaultClassNames) {\n          defaultClassNames.replaceWithText(\n            `\"${applyPrefix(\n              defaultClassNames.getText()?.replace(/\"|'/g, \"\"),\n              config.tailwind.prefix\n            )}\"`\n          )\n        }\n      }\n\n      // cva(..., { variants: { ... } })\n      if (node.getArguments()[1]?.isKind(SyntaxKind.ObjectLiteralExpression)) {\n        node\n          .getArguments()[1]\n          ?.getDescendantsOfKind(SyntaxKind.PropertyAssignment)\n          .find((node) => node.getName() === \"variants\")\n          ?.getDescendantsOfKind(SyntaxKind.PropertyAssignment)\n          .forEach((node) => {\n            node\n              .getDescendantsOfKind(SyntaxKind.PropertyAssignment)\n              .forEach((node) => {\n                const classNames = node.getInitializerIfKind(\n                  SyntaxKind.StringLiteral\n                )\n                if (classNames) {\n                  classNames?.replaceWithText(\n                    `\"${applyPrefix(\n                      classNames.getText()?.replace(/\"|'/g, \"\"),\n                      config.tailwind.prefix\n                    )}\"`\n                  )\n                }\n              })\n          })\n      }\n    })\n\n  // Find all jsx attributes with the name className.\n  sourceFile.getDescendantsOfKind(SyntaxKind.JsxAttribute).forEach((node) => {\n    if (node.getName() === \"className\") {\n      // className=\"...\"\n      if (node.getInitializer()?.isKind(SyntaxKind.StringLiteral)) {\n        const value = node.getInitializer()\n        if (value) {\n          value.replaceWithText(\n            `\"${applyPrefix(\n              value.getText()?.replace(/\"|'/g, \"\"),\n              config.tailwind.prefix\n            )}\"`\n          )\n        }\n      }\n\n      // className={...}\n      if (node.getInitializer()?.isKind(SyntaxKind.JsxExpression)) {\n        // Check if it's a call to cn().\n        const callExpression = node\n          .getInitializer()\n          ?.getDescendantsOfKind(SyntaxKind.CallExpression)\n          .find((node) => node.getExpression().getText() === \"cn\")\n        if (callExpression) {\n          // Loop through the arguments.\n          callExpression.getArguments().forEach((node) => {\n            if (\n              node.isKind(SyntaxKind.ConditionalExpression) ||\n              node.isKind(SyntaxKind.BinaryExpression)\n            ) {\n              node\n                .getChildrenOfKind(SyntaxKind.StringLiteral)\n                .forEach((node) => {\n                  node.replaceWithText(\n                    `\"${applyPrefix(\n                      node.getText()?.replace(/\"|'/g, \"\"),\n                      config.tailwind.prefix\n                    )}\"`\n                  )\n                })\n            }\n\n            if (node.isKind(SyntaxKind.StringLiteral)) {\n              node.replaceWithText(\n                `\"${applyPrefix(\n                  node.getText()?.replace(/\"|'/g, \"\"),\n                  config.tailwind.prefix\n                )}\"`\n              )\n            }\n          })\n        }\n      }\n    }\n\n    // classNames={...}\n    if (node.getName() === \"classNames\") {\n      if (node.getInitializer()?.isKind(SyntaxKind.JsxExpression)) {\n        node\n          .getDescendantsOfKind(SyntaxKind.PropertyAssignment)\n          .forEach((node) => {\n            if (node.getInitializer()?.isKind(SyntaxKind.CallExpression)) {\n              const callExpression = node.getInitializerIfKind(\n                SyntaxKind.CallExpression\n              )\n              if (callExpression) {\n                // Loop through the arguments.\n                callExpression.getArguments().forEach((arg) => {\n                  if (arg.isKind(SyntaxKind.ConditionalExpression)) {\n                    arg\n                      .getChildrenOfKind(SyntaxKind.StringLiteral)\n                      .forEach((node) => {\n                        node.replaceWithText(\n                          `\"${applyPrefix(\n                            node.getText()?.replace(/\"|'/g, \"\"),\n                            config.tailwind.prefix\n                          )}\"`\n                        )\n                      })\n                  }\n\n                  if (arg.isKind(SyntaxKind.StringLiteral)) {\n                    arg.replaceWithText(\n                      `\"${applyPrefix(\n                        arg.getText()?.replace(/\"|'/g, \"\"),\n                        config.tailwind.prefix\n                      )}\"`\n                    )\n                  }\n                })\n              }\n            }\n\n            if (node.getInitializer()?.isKind(SyntaxKind.StringLiteral)) {\n              if (node.getName() !== \"variant\") {\n                const classNames = node.getInitializer()\n                if (classNames) {\n                  classNames.replaceWithText(\n                    `\"${applyPrefix(\n                      classNames.getText()?.replace(/\"|'/g, \"\"),\n                      config.tailwind.prefix\n                    )}\"`\n                  )\n                }\n              }\n            }\n          })\n      }\n    }\n  })\n\n  return sourceFile\n}\n\nexport function applyPrefix(input: string, prefix: string = \"\") {\n  const classNames = input.split(\" \")\n  const prefixed: string[] = []\n  for (let className of classNames) {\n    const [variant, value, modifier] = splitClassName(className)\n    if (variant) {\n      modifier\n        ? prefixed.push(`${variant}:${prefix}${value}/${modifier}`)\n        : prefixed.push(`${variant}:${prefix}${value}`)\n    } else {\n      modifier\n        ? prefixed.push(`${prefix}${value}/${modifier}`)\n        : prefixed.push(`${prefix}${value}`)\n    }\n  }\n  return prefixed.join(\" \")\n}\n\nexport function applyPrefixesCss(css: string, prefix: string) {\n  const lines = css.split(\"\\n\")\n  for (let line of lines) {\n    if (line.includes(\"@apply\")) {\n      const originalTWCls = line.replace(\"@apply\", \"\").trim()\n      const prefixedTwCls = applyPrefix(originalTWCls, prefix)\n      css = css.replace(originalTWCls, prefixedTwCls)\n    }\n  }\n  return css\n}\n","import os from \"os\"\nimport path from \"path\"\nimport { initOptionsSchema } from \"@/src/commands/init\"\nimport { fetchRegistry } from \"@/src/registry/api\"\nimport { getPackageManager } from \"@/src/utils/get-package-manager\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport { execa } from \"execa\"\nimport fs from \"fs-extra\"\nimport prompts from \"prompts\"\nimport { z } from \"zod\"\n\nconst MONOREPO_TEMPLATE_URL =\n  \"https://codeload.github.com/shadcn-ui/ui/tar.gz/main\"\n\nexport async function createProject(\n  options: Pick<\n    z.infer<typeof initOptionsSchema>,\n    \"cwd\" | \"force\" | \"srcDir\" | \"components\"\n  >\n) {\n  options = {\n    srcDir: false,\n    ...options,\n  }\n\n  let projectType: \"next\" | \"monorepo\" = \"next\"\n  let projectName: string = \"my-app\"\n  let nextVersion = \"15.1.0\"\n\n  const isRemoteComponent =\n    options.components?.length === 1 &&\n    !!options.components[0].match(/\\/chat\\/b\\//)\n\n  if (options.components && isRemoteComponent) {\n    try {\n      const [result] = await fetchRegistry(options.components)\n      const { meta } = z\n        .object({\n          meta: z.object({\n            nextVersion: z.string(),\n          }),\n        })\n        .parse(result)\n      nextVersion = meta.nextVersion\n    } catch (error) {\n      logger.break()\n      handleError(error)\n    }\n  }\n\n  if (!options.force) {\n    const { type, name } = await prompts([\n      {\n        type: \"select\",\n        name: \"type\",\n        message: `The path ${highlighter.info(\n          options.cwd\n        )} does not contain a package.json file.\\n  Would you like to start a new project?`,\n        choices: [\n          { title: \"Next.js\", value: \"next\" },\n          { title: \"Next.js (Monorepo)\", value: \"monorepo\" },\n        ],\n        initial: 0,\n      },\n      {\n        type: \"text\",\n        name: \"name\",\n        message: \"What is your project named?\",\n        initial: projectName,\n        format: (value: string) => value.trim(),\n        validate: (value: string) =>\n          value.length > 128\n            ? `Name should be less than 128 characters.`\n            : true,\n      },\n    ])\n\n    projectType = type\n    projectName = name\n  }\n\n  const packageManager = await getPackageManager(options.cwd, {\n    withFallback: true,\n  })\n\n  const projectPath = `${options.cwd}/${projectName}`\n\n  // Check if path is writable.\n  try {\n    await fs.access(options.cwd, fs.constants.W_OK)\n  } catch (error) {\n    logger.break()\n    logger.error(`The path ${highlighter.info(options.cwd)} is not writable.`)\n    logger.error(\n      `It is likely you do not have write permissions for this folder or the path ${highlighter.info(\n        options.cwd\n      )} does not exist.`\n    )\n    logger.break()\n    process.exit(1)\n  }\n\n  if (fs.existsSync(path.resolve(options.cwd, projectName, \"package.json\"))) {\n    logger.break()\n    logger.error(\n      `A project with the name ${highlighter.info(projectName)} already exists.`\n    )\n    logger.error(`Please choose a different name and try again.`)\n    logger.break()\n    process.exit(1)\n  }\n\n  if (projectType === \"next\") {\n    await createNextProject(projectPath, {\n      version: nextVersion,\n      cwd: options.cwd,\n      packageManager,\n      srcDir: !!options.srcDir,\n    })\n  }\n\n  if (projectType === \"monorepo\") {\n    await createMonorepoProject(projectPath, {\n      packageManager,\n    })\n  }\n\n  return {\n    projectPath,\n    projectName,\n    projectType,\n  }\n}\n\nasync function createNextProject(\n  projectPath: string,\n  options: {\n    version: string\n    cwd: string\n    packageManager: string\n    srcDir: boolean\n  }\n) {\n  const createSpinner = spinner(\n    `Creating a new Next.js project. This may take a few minutes.`\n  ).start()\n\n  // Note: pnpm fails here. Fallback to npx with --use-PACKAGE-MANAGER.\n  const args = [\n    \"--tailwind\",\n    \"--eslint\",\n    \"--typescript\",\n    \"--app\",\n    options.srcDir ? \"--src-dir\" : \"--no-src-dir\",\n    \"--no-import-alias\",\n    `--use-${options.packageManager}`,\n  ]\n\n  if (options.version.startsWith(\"15\")) {\n    args.push(\"--turbopack\")\n  }\n\n  try {\n    await execa(\n      \"npx\",\n      [`create-next-app@${options.version}`, projectPath, \"--silent\", ...args],\n      {\n        cwd: options.cwd,\n      }\n    )\n  } catch (error) {\n    logger.break()\n    logger.error(\n      `Something went wrong creating a new Next.js project. Please try again.`\n    )\n    process.exit(1)\n  }\n\n  createSpinner?.succeed(\"Creating a new Next.js project.\")\n}\n\nasync function createMonorepoProject(\n  projectPath: string,\n  options: {\n    packageManager: string\n  }\n) {\n  const createSpinner = spinner(\n    `Creating a new Next.js monorepo. This may take a few minutes.`\n  ).start()\n\n  try {\n    // Get the template.\n    const templatePath = path.join(os.tmpdir(), `shadcn-template-${Date.now()}`)\n    await fs.ensureDir(templatePath)\n    const response = await fetch(MONOREPO_TEMPLATE_URL)\n    if (!response.ok) {\n      throw new Error(`Failed to download template: ${response.statusText}`)\n    }\n\n    // Write the tar file\n    const tarPath = path.resolve(templatePath, \"template.tar.gz\")\n    await fs.writeFile(tarPath, Buffer.from(await response.arrayBuffer()))\n    await execa(\"tar\", [\n      \"-xzf\",\n      tarPath,\n      \"-C\",\n      templatePath,\n      \"--strip-components=2\",\n      \"ui-main/templates/monorepo-next\",\n    ])\n    const extractedPath = path.resolve(templatePath, \"monorepo-next\")\n    await fs.move(extractedPath, projectPath)\n    await fs.remove(templatePath)\n\n    // Run install.\n    await execa(options.packageManager, [\"install\"], {\n      cwd: projectPath,\n    })\n\n    // Try git init.\n    const cwd = process.cwd()\n    await execa(\"git\", [\"--version\"], { cwd: projectPath })\n    await execa(\"git\", [\"init\"], { cwd: projectPath })\n    await execa(\"git\", [\"add\", \"-A\"], { cwd: projectPath })\n    await execa(\"git\", [\"commit\", \"-m\", \"Initial commit\"], {\n      cwd: projectPath,\n    })\n    await execa(\"cd\", [cwd])\n\n    createSpinner?.succeed(\"Creating a new Next.js monorepo.\")\n  } catch (error) {\n    createSpinner?.fail(\"Something went wrong creating a new Next.js monorepo.\")\n    handleError(error)\n  }\n}\n","import { promises as fs } from \"fs\"\nimport path from \"path\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport {\n  _createSourceFile,\n  _getQuoteChar,\n} from \"@/src/utils/updaters/update-tailwind-config\"\nimport { ObjectLiteralExpression, SyntaxKind } from \"ts-morph\"\n\nexport async function updateTailwindContent(\n  content: string[],\n  config: Config,\n  options: {\n    silent?: boolean\n  }\n) {\n  if (!content) {\n    return\n  }\n\n  options = {\n    silent: false,\n    ...options,\n  }\n\n  const tailwindFileRelativePath = path.relative(\n    config.resolvedPaths.cwd,\n    config.resolvedPaths.tailwindConfig\n  )\n  const tailwindSpinner = spinner(\n    `Updating ${highlighter.info(tailwindFileRelativePath)}`,\n    {\n      silent: options.silent,\n    }\n  ).start()\n  const raw = await fs.readFile(config.resolvedPaths.tailwindConfig, \"utf8\")\n  const output = await transformTailwindContent(raw, content, config)\n  await fs.writeFile(config.resolvedPaths.tailwindConfig, output, \"utf8\")\n  tailwindSpinner?.succeed()\n}\n\nexport async function transformTailwindContent(\n  input: string,\n  content: string[],\n  config: Config\n) {\n  const sourceFile = await _createSourceFile(input, config)\n  // Find the object with content property.\n  // This is faster than traversing the default export.\n  // TODO: maybe we do need to traverse the default export?\n  const configObject = sourceFile\n    .getDescendantsOfKind(SyntaxKind.ObjectLiteralExpression)\n    .find((node) =>\n      node\n        .getProperties()\n        .some(\n          (property) =>\n            property.isKind(SyntaxKind.PropertyAssignment) &&\n            property.getName() === \"content\"\n        )\n    )\n\n  // We couldn't find the config object, so we return the input as is.\n  if (!configObject) {\n    return input\n  }\n\n  addTailwindConfigContent(configObject, content)\n\n  return sourceFile.getFullText()\n}\n\nasync function addTailwindConfigContent(\n  configObject: ObjectLiteralExpression,\n  content: string[]\n) {\n  const quoteChar = _getQuoteChar(configObject)\n\n  const existingProperty = configObject.getProperty(\"content\")\n\n  if (!existingProperty) {\n    const newProperty = {\n      name: \"content\",\n      initializer: `[${quoteChar}${content.join(\n        `${quoteChar}, ${quoteChar}`\n      )}${quoteChar}]`,\n    }\n    configObject.addPropertyAssignment(newProperty)\n\n    return configObject\n  }\n\n  if (existingProperty.isKind(SyntaxKind.PropertyAssignment)) {\n    const initializer = existingProperty.getInitializer()\n\n    // If property is an array, append.\n    if (initializer?.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      for (const contentItem of content) {\n        const newValue = `${quoteChar}${contentItem}${quoteChar}`\n\n        // Check if the array already contains the value.\n        if (\n          initializer\n            .getElements()\n            .map((element) => element.getText())\n            .includes(newValue)\n        ) {\n          continue\n        }\n\n        initializer.addElement(newValue)\n      }\n    }\n\n    return configObject\n  }\n\n  return configObject\n}\n","import path from \"path\"\nimport { addOptionsSchema } from \"@/src/commands/add\"\nimport * as ERRORS from \"@/src/utils/errors\"\nimport { getConfig } from \"@/src/utils/get-config\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport fs from \"fs-extra\"\nimport { z } from \"zod\"\n\nexport async function preFlightAdd(options: z.infer<typeof addOptionsSchema>) {\n  const errors: Record<string, boolean> = {}\n\n  // Ensure target directory exists.\n  // Check for empty project. We assume if no package.json exists, the project is empty.\n  if (\n    !fs.existsSync(options.cwd) ||\n    !fs.existsSync(path.resolve(options.cwd, \"package.json\"))\n  ) {\n    errors[ERRORS.MISSING_DIR_OR_EMPTY_PROJECT] = true\n    return {\n      errors,\n      config: null,\n    }\n  }\n\n  // Check for existing components.json file.\n  if (!fs.existsSync(path.resolve(options.cwd, \"components.json\"))) {\n    errors[ERRORS.MISSING_CONFIG] = true\n    return {\n      errors,\n      config: null,\n    }\n  }\n\n  try {\n    const config = await getConfig(options.cwd)\n\n    return {\n      errors,\n      config: config!,\n    }\n  } catch (error) {\n    logger.break()\n    logger.error(\n      `An invalid ${highlighter.info(\n        \"components.json\"\n      )} file was found at ${highlighter.info(\n        options.cwd\n      )}.\\nBefore you can add components, you must create a valid ${highlighter.info(\n        \"components.json\"\n      )} file by running the ${highlighter.info(\"init\")} command.`\n    )\n    logger.error(\n      `Learn more at ${highlighter.info(\n        \"https://ui.shadcn.com/docs/components-json\"\n      )}.`\n    )\n    logger.break()\n    process.exit(1)\n  }\n}\n","import fs from \"fs/promises\"\nimport path from \"path\"\nimport { getRegistryItem } from \"@/src/registry/api\"\nimport { Config } from \"@/src/utils/get-config\"\n\nexport async function updateAppIndex(component: string, config: Config) {\n  const indexPath = path.join(config.resolvedPaths.cwd, \"app/page.tsx\")\n\n  if (!(await fs.stat(indexPath)).isFile()) {\n    return\n  }\n\n  const registryItem = await getRegistryItem(component, config.style)\n  if (\n    !registryItem?.meta?.importSpecifier ||\n    !registryItem?.meta?.moduleSpecifier\n  ) {\n    return\n  }\n\n  // Overwrite the index file with the new import.\n  const content = `import { ${registryItem?.meta?.importSpecifier} } from \"${registryItem.meta.moduleSpecifier}\"\\n\\nexport default function Page() {\\n  return <${registryItem?.meta?.importSpecifier} />\\n}`\n  await fs.writeFile(indexPath, content, \"utf8\")\n}\n","import * as fs from \"fs/promises\"\nimport * as path from \"path\"\nimport { preFlightBuild } from \"@/src/preflights/preflight-build\"\nimport { registryItemSchema, registrySchema } from \"@/src/registry\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport { Command } from \"commander\"\nimport { z } from \"zod\"\n\nexport const buildOptionsSchema = z.object({\n  cwd: z.string(),\n  registryFile: z.string(),\n  outputDir: z.string(),\n})\n\nexport const build = new Command()\n  .name(\"build\")\n  .description(\"build components for a shadcn registry\")\n  .argument(\"[registry]\", \"path to registry.json file\", \"./registry.json\")\n  .option(\n    \"-o, --output <path>\",\n    \"destination directory for json files\",\n    \"./public/r\"\n  )\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .action(async (registry: string, opts) => {\n    try {\n      const options = buildOptionsSchema.parse({\n        cwd: path.resolve(opts.cwd),\n        registryFile: registry,\n        outputDir: opts.output,\n      })\n\n      const { resolvePaths } = await preFlightBuild(options)\n      const content = await fs.readFile(resolvePaths.registryFile, \"utf-8\")\n\n      const result = registrySchema.safeParse(JSON.parse(content))\n\n      if (!result.success) {\n        logger.error(\n          `Invalid registry file found at ${highlighter.info(\n            resolvePaths.registryFile\n          )}.`\n        )\n        process.exit(1)\n      }\n\n      const buildSpinner = spinner(\"Building registry...\")\n      for (const registryItem of result.data.items) {\n        if (!registryItem.files) {\n          continue\n        }\n\n        buildSpinner.start(`Building ${registryItem.name}...`)\n\n        // Add the schema to the registry item.\n        registryItem[\"$schema\"] =\n          \"https://ui.shadcn.com/schema/registry-item.json\"\n\n        // Loop through each file in the files array.\n        for (const file of registryItem.files) {\n          file[\"content\"] = await fs.readFile(\n            path.resolve(resolvePaths.cwd, file.path),\n            \"utf-8\"\n          )\n        }\n\n        // Validate the registry item.\n        const result = registryItemSchema.safeParse(registryItem)\n        if (!result.success) {\n          logger.error(\n            `Invalid registry item found for ${highlighter.info(\n              registryItem.name\n            )}.`\n          )\n          continue\n        }\n\n        // Write the registry item to the output directory.\n        await fs.writeFile(\n          path.resolve(resolvePaths.outputDir, `${result.data.name}.json`),\n          JSON.stringify(result.data, null, 2)\n        )\n      }\n\n      buildSpinner.succeed(\"Building registry.\")\n    } catch (error) {\n      logger.break()\n      handleError(error)\n    }\n  })\n","import path from \"path\"\nimport { buildOptionsSchema } from \"@/src/commands/build\"\nimport * as ERRORS from \"@/src/utils/errors\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport fs from \"fs-extra\"\nimport { z } from \"zod\"\n\nexport async function preFlightBuild(\n  options: z.infer<typeof buildOptionsSchema>\n) {\n  const errors: Record<string, boolean> = {}\n\n  const resolvePaths = {\n    cwd: options.cwd,\n    registryFile: path.resolve(options.cwd, options.registryFile),\n    outputDir: path.resolve(options.cwd, options.outputDir),\n  }\n\n  // Ensure registry file exists.\n  if (!fs.existsSync(resolvePaths.registryFile)) {\n    errors[ERRORS.BUILD_MISSING_REGISTRY_FILE] = true\n  }\n\n  // Create output directory if it doesn't exist.\n  await fs.mkdir(resolvePaths.outputDir, { recursive: true })\n\n  if (Object.keys(errors).length > 0) {\n    if (errors[ERRORS.BUILD_MISSING_REGISTRY_FILE]) {\n      logger.break()\n      logger.error(\n        `The path ${highlighter.info(\n          resolvePaths.registryFile\n        )} does not exist.`\n      )\n    }\n\n    logger.break()\n    process.exit(1)\n  }\n\n  return {\n    errors,\n    resolvePaths,\n  }\n}\n","import { existsSync, promises as fs } from \"fs\"\nimport path from \"path\"\nimport {\n  fetchTree,\n  getItemTargetPath,\n  getRegistryBaseColor,\n  getRegistryIndex,\n} from \"@/src/registry/api\"\nimport { registryIndexSchema } from \"@/src/registry/schema\"\nimport { Config, getConfig } from \"@/src/utils/get-config\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { transform } from \"@/src/utils/transformers\"\nimport { Command } from \"commander\"\nimport { diffLines, type Change } from \"diff\"\nimport { z } from \"zod\"\n\nconst updateOptionsSchema = z.object({\n  component: z.string().optional(),\n  yes: z.boolean(),\n  cwd: z.string(),\n  path: z.string().optional(),\n})\n\nexport const diff = new Command()\n  .name(\"diff\")\n  .description(\"check for updates against the registry\")\n  .argument(\"[component]\", \"the component name\")\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", false)\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .action(async (name, opts) => {\n    try {\n      const options = updateOptionsSchema.parse({\n        component: name,\n        ...opts,\n      })\n\n      const cwd = path.resolve(options.cwd)\n\n      if (!existsSync(cwd)) {\n        logger.error(`The path ${cwd} does not exist. Please try again.`)\n        process.exit(1)\n      }\n\n      const config = await getConfig(cwd)\n      if (!config) {\n        logger.warn(\n          `Configuration is missing. Please run ${highlighter.success(\n            `init`\n          )} to create a components.json file.`\n        )\n        process.exit(1)\n      }\n\n      const registryIndex = await getRegistryIndex()\n\n      if (!registryIndex) {\n        handleError(new Error(\"Failed to fetch registry index.\"))\n        process.exit(1)\n      }\n\n      if (!options.component) {\n        const targetDir = config.resolvedPaths.components\n\n        // Find all components that exist in the project.\n        const projectComponents = registryIndex.filter((item) => {\n          for (const file of item.files ?? []) {\n            const filePath = path.resolve(\n              targetDir,\n              typeof file === \"string\" ? file : file.path\n            )\n            if (existsSync(filePath)) {\n              return true\n            }\n          }\n\n          return false\n        })\n\n        // Check for updates.\n        const componentsWithUpdates = []\n        for (const component of projectComponents) {\n          const changes = await diffComponent(component, config)\n          if (changes.length) {\n            componentsWithUpdates.push({\n              name: component.name,\n              changes,\n            })\n          }\n        }\n\n        if (!componentsWithUpdates.length) {\n          logger.info(\"No updates found.\")\n          process.exit(0)\n        }\n\n        logger.info(\"The following components have updates available:\")\n        for (const component of componentsWithUpdates) {\n          logger.info(`- ${component.name}`)\n          for (const change of component.changes) {\n            logger.info(`  - ${change.filePath}`)\n          }\n        }\n        logger.break()\n        logger.info(\n          `Run ${highlighter.success(`diff <component>`)} to see the changes.`\n        )\n        process.exit(0)\n      }\n\n      // Show diff for a single component.\n      const component = registryIndex.find(\n        (item) => item.name === options.component\n      )\n\n      if (!component) {\n        logger.error(\n          `The component ${highlighter.success(\n            options.component\n          )} does not exist.`\n        )\n        process.exit(1)\n      }\n\n      const changes = await diffComponent(component, config)\n\n      if (!changes.length) {\n        logger.info(`No updates found for ${options.component}.`)\n        process.exit(0)\n      }\n\n      for (const change of changes) {\n        logger.info(`- ${change.filePath}`)\n        await printDiff(change.patch)\n        logger.info(\"\")\n      }\n    } catch (error) {\n      handleError(error)\n    }\n  })\n\nasync function diffComponent(\n  component: z.infer<typeof registryIndexSchema>[number],\n  config: Config\n) {\n  const payload = await fetchTree(config.style, [component])\n  const baseColor = await getRegistryBaseColor(config.tailwind.baseColor)\n\n  if (!payload) {\n    return []\n  }\n\n  const changes = []\n\n  for (const item of payload) {\n    const targetDir = await getItemTargetPath(config, item)\n\n    if (!targetDir) {\n      continue\n    }\n\n    for (const file of item.files ?? []) {\n      const filePath = path.resolve(\n        targetDir,\n        typeof file === \"string\" ? file : file.path\n      )\n\n      if (!existsSync(filePath)) {\n        continue\n      }\n\n      const fileContent = await fs.readFile(filePath, \"utf8\")\n\n      if (typeof file === \"string\" || !file.content) {\n        continue\n      }\n\n      const registryContent = await transform({\n        filename: file.path,\n        raw: file.content,\n        config,\n        baseColor,\n      })\n\n      const patch = diffLines(registryContent as string, fileContent)\n      if (patch.length > 1) {\n        changes.push({\n          filePath,\n          patch,\n        })\n      }\n    }\n  }\n\n  return changes\n}\n\nasync function printDiff(diff: Change[]) {\n  diff.forEach((part) => {\n    if (part) {\n      if (part.added) {\n        return process.stdout.write(highlighter.success(part.value))\n      }\n      if (part.removed) {\n        return process.stdout.write(highlighter.error(part.value))\n      }\n\n      return process.stdout.write(part.value)\n    }\n  })\n}\n","import { getConfig } from \"@/src/utils/get-config\"\nimport { getProjectInfo } from \"@/src/utils/get-project-info\"\nimport { logger } from \"@/src/utils/logger\"\nimport { Command } from \"commander\"\n\nexport const info = new Command()\n  .name(\"info\")\n  .description(\"get information about your project\")\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .action(async (opts) => {\n    logger.info(\"> project info\")\n    console.log(await getProjectInfo(opts.cwd))\n    logger.break()\n    logger.info(\"> components.json\")\n    console.log(await getConfig(opts.cwd))\n  })\n","import path from \"path\"\nimport { migrateIcons } from \"@/src/migrations/migrate-icons\"\nimport { preFlightMigrate } from \"@/src/preflights/preflight-migrate\"\nimport * as ERRORS from \"@/src/utils/errors\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { logger } from \"@/src/utils/logger\"\nimport { Command } from \"commander\"\nimport { z } from \"zod\"\n\nexport const migrations = [\n  {\n    name: \"icons\",\n    description: \"migrate your ui components to a different icon library.\",\n  },\n] as const\n\nexport const migrateOptionsSchema = z.object({\n  cwd: z.string(),\n  list: z.boolean(),\n  migration: z\n    .string()\n    .refine(\n      (value) =>\n        value && migrations.some((migration) => migration.name === value),\n      {\n        message:\n          \"You must specify a valid migration. Run `shadcn migrate --list` to see available migrations.\",\n      }\n    )\n    .optional(),\n})\n\nexport const migrate = new Command()\n  .name(\"migrate\")\n  .description(\"run a migration.\")\n  .argument(\"[migration]\", \"the migration to run.\")\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .option(\"-l, --list\", \"list all migrations.\", false)\n  .action(async (migration, opts) => {\n    try {\n      const options = migrateOptionsSchema.parse({\n        cwd: path.resolve(opts.cwd),\n        migration,\n        list: opts.list,\n      })\n\n      if (options.list || !options.migration) {\n        logger.info(\"Available migrations:\")\n        for (const migration of migrations) {\n          logger.info(`- ${migration.name}: ${migration.description}`)\n        }\n        return\n      }\n\n      if (!options.migration) {\n        throw new Error(\n          \"You must specify a migration. Run `shadcn migrate --list` to see available migrations.\"\n        )\n      }\n\n      let { errors, config } = await preFlightMigrate(options)\n\n      if (\n        errors[ERRORS.MISSING_DIR_OR_EMPTY_PROJECT] ||\n        errors[ERRORS.MISSING_CONFIG]\n      ) {\n        throw new Error(\n          \"No `components.json` file found. Ensure you are at the root of your project.\"\n        )\n      }\n\n      if (!config) {\n        throw new Error(\n          \"Something went wrong reading your `components.json` file. Please ensure you have a valid `components.json` file.\"\n        )\n      }\n\n      if (options.migration === \"icons\") {\n        await migrateIcons(config)\n      }\n    } catch (error) {\n      logger.break()\n      handleError(error)\n    }\n  })\n","import { randomBytes } from \"crypto\"\nimport { promises as fs } from \"fs\"\nimport { tmpdir } from \"os\"\nimport path from \"path\"\nimport { getRegistryIcons } from \"@/src/registry/api\"\nimport { iconsSchema } from \"@/src/registry/schema\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { ICON_LIBRARIES } from \"@/src/utils/icon-libraries\"\nimport { logger } from \"@/src/utils/logger\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport { updateDependencies } from \"@/src/utils/updaters/update-dependencies\"\nimport fg from \"fast-glob\"\nimport prompts from \"prompts\"\nimport { Project, ScriptKind, SyntaxKind } from \"ts-morph\"\nimport { z } from \"zod\"\n\nexport async function migrateIcons(config: Config) {\n  if (!config.resolvedPaths.ui) {\n    throw new Error(\n      \"We could not find a valid `ui` path in your `components.json` file. Please ensure you have a valid `ui` path in your `components.json` file.\"\n    )\n  }\n\n  const uiPath = config.resolvedPaths.ui\n  const [files, registryIcons] = await Promise.all([\n    fg(\"**/*.{js,ts,jsx,tsx}\", {\n      cwd: uiPath,\n    }),\n    getRegistryIcons(),\n  ])\n\n  if (Object.keys(registryIcons).length === 0) {\n    throw new Error(\"Something went wrong fetching the registry icons.\")\n  }\n\n  const libraryChoices = Object.entries(ICON_LIBRARIES).map(\n    ([name, iconLibrary]) => ({\n      title: iconLibrary.name,\n      value: name,\n    })\n  )\n\n  const migrateOptions = await prompts([\n    {\n      type: \"select\",\n      name: \"sourceLibrary\",\n      message: `Which icon library would you like to ${highlighter.info(\n        \"migrate from\"\n      )}?`,\n      choices: libraryChoices,\n    },\n    {\n      type: \"select\",\n      name: \"targetLibrary\",\n      message: `Which icon library would you like to ${highlighter.info(\n        \"migrate to\"\n      )}?`,\n      choices: libraryChoices,\n    },\n  ])\n\n  if (migrateOptions.sourceLibrary === migrateOptions.targetLibrary) {\n    throw new Error(\n      \"You cannot migrate to the same icon library. Please choose a different icon library.\"\n    )\n  }\n\n  if (\n    !(\n      migrateOptions.sourceLibrary in ICON_LIBRARIES &&\n      migrateOptions.targetLibrary in ICON_LIBRARIES\n    )\n  ) {\n    throw new Error(\"Invalid icon library. Please choose a valid icon library.\")\n  }\n\n  const sourceLibrary =\n    ICON_LIBRARIES[migrateOptions.sourceLibrary as keyof typeof ICON_LIBRARIES]\n  const targetLibrary =\n    ICON_LIBRARIES[migrateOptions.targetLibrary as keyof typeof ICON_LIBRARIES]\n  const { confirm } = await prompts({\n    type: \"confirm\",\n    name: \"confirm\",\n    initial: true,\n    message: `We will migrate ${highlighter.info(\n      files.length\n    )} files in ${highlighter.info(\n      `./${path.relative(config.resolvedPaths.cwd, uiPath)}`\n    )} from ${highlighter.info(sourceLibrary.name)} to ${highlighter.info(\n      targetLibrary.name\n    )}. Continue?`,\n  })\n\n  if (!confirm) {\n    logger.info(\"Migration cancelled.\")\n    process.exit(0)\n  }\n\n  if (targetLibrary.package) {\n    await updateDependencies([targetLibrary.package], config, {\n      silent: false,\n    })\n  }\n\n  const migrationSpinner = spinner(`Migrating icons...`)?.start()\n\n  await Promise.all(\n    files.map(async (file) => {\n      migrationSpinner.text = `Migrating ${file}...`\n\n      const filePath = path.join(uiPath, file)\n      const fileContent = await fs.readFile(filePath, \"utf-8\")\n\n      const content = await migrateIconsFile(\n        fileContent,\n        migrateOptions.sourceLibrary,\n        migrateOptions.targetLibrary,\n        registryIcons\n      )\n\n      await fs.writeFile(filePath, content)\n    })\n  )\n\n  migrationSpinner.succeed(\"Migration complete.\")\n}\n\nexport async function migrateIconsFile(\n  content: string,\n  sourceLibrary: keyof typeof ICON_LIBRARIES,\n  targetLibrary: keyof typeof ICON_LIBRARIES,\n  iconsMapping: z.infer<typeof iconsSchema>\n) {\n  const sourceLibraryImport = ICON_LIBRARIES[sourceLibrary]?.import\n  const targetLibraryImport = ICON_LIBRARIES[targetLibrary]?.import\n\n  const dir = await fs.mkdtemp(path.join(tmpdir(), \"shadcn-\"))\n  const project = new Project({\n    compilerOptions: {},\n  })\n\n  const tempFile = path.join(\n    dir,\n    `shadcn-icons-${randomBytes(4).toString(\"hex\")}.tsx`\n  )\n  const sourceFile = project.createSourceFile(tempFile, content, {\n    scriptKind: ScriptKind.TSX,\n  })\n\n  // Find all sourceLibrary imports.\n  let targetedIcons: string[] = []\n  for (const importDeclaration of sourceFile.getImportDeclarations() ?? []) {\n    if (\n      importDeclaration.getModuleSpecifier()?.getText() !==\n      `\"${sourceLibraryImport}\"`\n    ) {\n      continue\n    }\n\n    for (const specifier of importDeclaration.getNamedImports() ?? []) {\n      const iconName = specifier.getName()\n\n      // TODO: this is O(n^2) but okay for now.\n      const targetedIcon = Object.values(iconsMapping).find(\n        (icon) => icon[sourceLibrary] === iconName\n      )?.[targetLibrary]\n\n      if (!targetedIcon || targetedIcons.includes(targetedIcon)) {\n        continue\n      }\n\n      targetedIcons.push(targetedIcon)\n\n      // Remove the named import.\n      specifier.remove()\n\n      // Replace with the targeted icon.\n      sourceFile\n        .getDescendantsOfKind(SyntaxKind.JsxSelfClosingElement)\n        .filter((node) => node.getTagNameNode()?.getText() === iconName)\n        .forEach((node) => node.getTagNameNode()?.replaceWithText(targetedIcon))\n    }\n\n    // If the named import is empty, remove the import declaration.\n    if (importDeclaration.getNamedImports()?.length === 0) {\n      importDeclaration.remove()\n    }\n  }\n\n  if (targetedIcons.length > 0) {\n    sourceFile.addImportDeclaration({\n      moduleSpecifier: targetLibraryImport,\n      namedImports: targetedIcons.map((icon) => ({\n        name: icon,\n      })),\n    })\n  }\n\n  return await sourceFile.getText()\n}\n","import path from \"path\"\nimport { addOptionsSchema } from \"@/src/commands/add\"\nimport { migrateOptionsSchema } from \"@/src/commands/migrate\"\nimport * as ERRORS from \"@/src/utils/errors\"\nimport { getConfig } from \"@/src/utils/get-config\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport fs from \"fs-extra\"\nimport { z } from \"zod\"\n\nexport async function preFlightMigrate(\n  options: z.infer<typeof migrateOptionsSchema>\n) {\n  const errors: Record<string, boolean> = {}\n\n  // Ensure target directory exists.\n  // Check for empty project. We assume if no package.json exists, the project is empty.\n  if (\n    !fs.existsSync(options.cwd) ||\n    !fs.existsSync(path.resolve(options.cwd, \"package.json\"))\n  ) {\n    errors[ERRORS.MISSING_DIR_OR_EMPTY_PROJECT] = true\n    return {\n      errors,\n      config: null,\n    }\n  }\n\n  // Check for existing components.json file.\n  if (!fs.existsSync(path.resolve(options.cwd, \"components.json\"))) {\n    errors[ERRORS.MISSING_CONFIG] = true\n    return {\n      errors,\n      config: null,\n    }\n  }\n\n  try {\n    const config = await getConfig(options.cwd)\n\n    return {\n      errors,\n      config: config!,\n    }\n  } catch (error) {\n    logger.break()\n    logger.error(\n      `An invalid ${highlighter.info(\n        \"components.json\"\n      )} file was found at ${highlighter.info(\n        options.cwd\n      )}.\\nBefore you can run a migration, you must create a valid ${highlighter.info(\n        \"components.json\"\n      )} file by running the ${highlighter.info(\"init\")} command.`\n    )\n    logger.error(\n      `Learn more at ${highlighter.info(\n        \"https://ui.shadcn.com/docs/components-json\"\n      )}.`\n    )\n    logger.break()\n    process.exit(1)\n  }\n}\n","#!/usr/bin/env node\nimport { add } from \"@/src/commands/add\"\nimport { build } from \"@/src/commands/build\"\nimport { diff } from \"@/src/commands/diff\"\nimport { info } from \"@/src/commands/info\"\nimport { init } from \"@/src/commands/init\"\nimport { migrate } from \"@/src/commands/migrate\"\nimport { Command } from \"commander\"\n\nimport packageJson from \"../package.json\"\n\nprocess.on(\"SIGINT\", () => process.exit(0))\nprocess.on(\"SIGTERM\", () => process.exit(0))\n\nasync function main() {\n  const program = new Command()\n    .name(\"shadcn\")\n    .description(\"add components and dependencies to your project\")\n    .version(\n      packageJson.version || \"1.0.0\",\n      \"-v, --version\",\n      \"display the version number\"\n    )\n\n  program\n    .addCommand(init)\n    .addCommand(add)\n    .addCommand(diff)\n    .addCommand(migrate)\n    .addCommand(info)\n    .addCommand(build)\n\n  program.parse()\n}\n\nmain()\n\nexport * from \"./registry/api\"\n","{\n  \"name\": \"shadcn\",\n  \"version\": \"2.3.0\",\n  \"description\": \"Add components to your apps.\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"license\": \"MIT\",\n  \"author\": {\n    \"name\": \"shadcn\",\n    \"url\": \"https://twitter.com/shadcn\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/shadcn/ui.git\",\n    \"directory\": \"packages/shadcn\"\n  },\n  \"files\": [\n    \"dist\"\n  ],\n  \"keywords\": [\n    \"components\",\n    \"ui\",\n    \"tailwind\",\n    \"radix-ui\",\n    \"shadcn\"\n  ],\n  \"type\": \"module\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./dist/index.d.ts\",\n      \"default\": \"./dist/index.js\"\n    },\n    \"./registry\": {\n      \"types\": \"./dist/registry/index.d.ts\",\n      \"default\": \"./dist/registry/index.js\"\n    }\n  },\n  \"bin\": \"./dist/index.js\",\n  \"scripts\": {\n    \"dev\": \"tsup --watch\",\n    \"build\": \"tsup\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"clean\": \"rimraf dist && rimraf components\",\n    \"start:dev\": \"cross-env REGISTRY_URL=http://localhost:3333/r node dist/index.js\",\n    \"start:prod\": \"cross-env REGISTRY_URL=https://ui.shadcn.com/r node dist/index.js\",\n    \"start\": \"node dist/index.js\",\n    \"format:write\": \"prettier --write \\\"**/*.{ts,tsx,mdx}\\\" --cache\",\n    \"format:check\": \"prettier --check \\\"**/*.{ts,tsx,mdx}\\\" --cache\",\n    \"release\": \"changeset version\",\n    \"pub:beta\": \"pnpm build && pnpm publish --no-git-checks --access public --tag beta\",\n    \"pub:next\": \"pnpm build && pnpm publish --no-git-checks --access public --tag next\",\n    \"pub:release\": \"pnpm build && pnpm publish --access public\",\n    \"test\": \"vitest run\",\n    \"test:dev\": \"REGISTRY_URL=http://localhost:3333/r vitest run\"\n  },\n  \"dependencies\": {\n    \"@antfu/ni\": \"^0.21.4\",\n    \"@babel/core\": \"^7.22.1\",\n    \"@babel/parser\": \"^7.22.6\",\n    \"@babel/plugin-transform-typescript\": \"^7.22.5\",\n    \"commander\": \"^10.0.0\",\n    \"cosmiconfig\": \"^8.1.3\",\n    \"deepmerge\": \"^4.3.1\",\n    \"diff\": \"^5.1.0\",\n    \"execa\": \"^7.0.0\",\n    \"fast-glob\": \"^3.3.2\",\n    \"fs-extra\": \"^11.1.0\",\n    \"https-proxy-agent\": \"^6.2.0\",\n    \"kleur\": \"^4.1.5\",\n    \"node-fetch\": \"^3.3.0\",\n    \"ora\": \"^6.1.2\",\n    \"postcss\": \"^8.4.24\",\n    \"prompts\": \"^2.4.2\",\n    \"recast\": \"^0.23.2\",\n    \"stringify-object\": \"^5.0.0\",\n    \"ts-morph\": \"^18.0.0\",\n    \"tsconfig-paths\": \"^4.2.0\",\n    \"zod\": \"^3.20.2\"\n  },\n  \"devDependencies\": {\n    \"@types/babel__core\": \"^7.20.1\",\n    \"@types/diff\": \"^5.0.3\",\n    \"@types/fs-extra\": \"^11.0.1\",\n    \"@types/prompts\": \"^2.4.2\",\n    \"@types/stringify-object\": \"^4.0.5\",\n    \"rimraf\": \"^6.0.1\",\n    \"tsup\": \"^6.6.3\",\n    \"type-fest\": \"^3.8.0\",\n    \"typescript\": \"^4.9.3\"\n  }\n}\n"]}